var _user$project$InputUpdate$placeholderUpdateFunc = F2(
	function (inp, newPlaceholder) {
		var _p0 = inp;
		if (_p0.ctor === 'TextInput') {
			return _user$project$Models$TextInput(
				_elm_lang$core$Native_Utils.update(
					_p0._0,
					{
						placeholder: _elm_lang$core$Maybe$Just(newPlaceholder)
					}));
		} else {
			return inp;
		}
	});
var _user$project$InputUpdate$updateInputAttribute = F4(
	function (updateFunc, model, inputId, newPlaceholder) {
		var newInputs = A2(
			_elm_lang$core$List$map,
			function (inp) {
				return _elm_lang$core$Native_Utils.eq(
					_user$project$Models$extractId(inp),
					inputId) ? A2(updateFunc, inp, newPlaceholder) : inp;
			},
			model.form);
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{form: newInputs}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$InputUpdate$update = F2(
	function (msg, model) {
		var _p1 = model.currentlyEdditedInputId;
		if (_p1.ctor === 'Nothing') {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		} else {
			var _p2 = msg;
			switch (_p2.ctor) {
				case 'PlaceholderEdit':
					return A4(_user$project$InputUpdate$updateInputAttribute, _user$project$InputUpdate$placeholderUpdateFunc, model, _p1._0, _p2._0);
				case 'LabelEdit':
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				default:
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			}
		}
	});
