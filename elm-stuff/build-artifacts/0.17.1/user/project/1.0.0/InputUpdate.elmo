var _user$project$InputUpdate$readonlyUpdateFunc = F2(
	function (inp, newReadonly) {
		var _p0 = inp;
		if (_p0.ctor === 'TextInput') {
			return _user$project$FormModel$TextInput(
				_elm_lang$core$Native_Utils.update(
					_p0._0,
					{readonly: newReadonly}));
		} else {
			return inp;
		}
	});
var _user$project$InputUpdate$disabledUpdateFunc = F2(
	function (inp, newDisabled) {
		var _p1 = inp;
		switch (_p1.ctor) {
			case 'TextInput':
				return _user$project$FormModel$TextInput(
					_elm_lang$core$Native_Utils.update(
						_p1._0,
						{disabled: newDisabled}));
			case 'Select':
				return _user$project$FormModel$Select(
					_elm_lang$core$Native_Utils.update(
						_p1._0,
						{disabled: newDisabled}));
			default:
				return inp;
		}
	});
var _user$project$InputUpdate$smallUpdateFunc = F2(
	function (inp, newSmall) {
		var _p2 = inp;
		switch (_p2.ctor) {
			case 'TextInput':
				return _user$project$FormModel$TextInput(
					_elm_lang$core$Native_Utils.update(
						_p2._0,
						{
							small: _elm_lang$core$Maybe$Just(newSmall)
						}));
			case 'Select':
				return _user$project$FormModel$Select(
					_elm_lang$core$Native_Utils.update(
						_p2._0,
						{
							small: _elm_lang$core$Maybe$Just(newSmall)
						}));
			default:
				return inp;
		}
	});
var _user$project$InputUpdate$labelUpdateFunc = F2(
	function (inp, newLabel) {
		var _p3 = inp;
		switch (_p3.ctor) {
			case 'TextInput':
				return _user$project$FormModel$TextInput(
					_elm_lang$core$Native_Utils.update(
						_p3._0,
						{
							label: _elm_lang$core$Maybe$Just(newLabel)
						}));
			case 'Select':
				return _user$project$FormModel$Select(
					_elm_lang$core$Native_Utils.update(
						_p3._0,
						{
							label: _elm_lang$core$Maybe$Just(newLabel)
						}));
			default:
				return inp;
		}
	});
var _user$project$InputUpdate$placeholderUpdateFunc = F2(
	function (inp, newPlaceholder) {
		var _p4 = inp;
		if (_p4.ctor === 'TextInput') {
			return _user$project$FormModel$TextInput(
				_elm_lang$core$Native_Utils.update(
					_p4._0,
					{
						placeholder: _elm_lang$core$Maybe$Just(newPlaceholder)
					}));
		} else {
			return inp;
		}
	});
var _user$project$InputUpdate$secondAddonEditFunc = F2(
	function (inp, newAddon) {
		var wrappedAddon = _elm_lang$core$Native_Utils.eq(newAddon, '') ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(newAddon);
		var _p5 = inp;
		if (_p5.ctor === 'TextInput') {
			return _user$project$FormModel$TextInput(
				_elm_lang$core$Native_Utils.update(
					_p5._0,
					{addon2: wrappedAddon}));
		} else {
			return inp;
		}
	});
var _user$project$InputUpdate$firstAddonEditFunc = F2(
	function (inp, newAddon) {
		var wrappedAddon = _elm_lang$core$Native_Utils.eq(newAddon, '') ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(newAddon);
		var _p6 = inp;
		if (_p6.ctor === 'TextInput') {
			return _user$project$FormModel$TextInput(
				_elm_lang$core$Native_Utils.update(
					_p6._0,
					{addon1: wrappedAddon}));
		} else {
			return inp;
		}
	});
var _user$project$InputUpdate$typeEditFunc = F2(
	function (inp, newType) {
		var neco = _user$project$FormModel$textToType(newType);
		var _p7 = inp;
		if (_p7.ctor === 'TextInput') {
			return _user$project$FormModel$TextInput(
				_elm_lang$core$Native_Utils.update(
					_p7._0,
					{type$: neco}));
		} else {
			return inp;
		}
	});
var _user$project$InputUpdate$sizeEditFunc = F2(
	function (inp, newSize) {
		var neco = _user$project$FormModel$textToSize(newSize);
		var _p8 = inp;
		switch (_p8.ctor) {
			case 'TextInput':
				return _user$project$FormModel$TextInput(
					_elm_lang$core$Native_Utils.update(
						_p8._0,
						{size: neco}));
			case 'Select':
				return _user$project$FormModel$Select(
					_elm_lang$core$Native_Utils.update(
						_p8._0,
						{size: neco}));
			default:
				return inp;
		}
	});
var _user$project$InputUpdate$addNewOptionFunc = F2(
	function (inp, newOption) {
		var _p9 = inp;
		if (_p9.ctor === 'Select') {
			var _p10 = _p9._0;
			return _user$project$FormModel$Select(
				_elm_lang$core$Native_Utils.update(
					_p10,
					{
						options: A2(_elm_lang$core$List_ops['::'], newOption, _p10.options)
					}));
		} else {
			return inp;
		}
	});
var _user$project$InputUpdate$removeOptionFunc = F2(
	function (inp, newOption) {
		var func = function (neco) {
			return _elm_lang$core$Native_Utils.eq(newOption, neco) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(neco);
		};
		var _p11 = inp;
		if (_p11.ctor === 'Select') {
			var _p12 = _p11._0;
			return _user$project$FormModel$Select(
				_elm_lang$core$Native_Utils.update(
					_p12,
					{
						options: A2(
							_elm_lang$core$List$filterMap,
							_elm_lang$core$Basics$identity,
							A2(_elm_lang$core$List$map, func, _p12.options))
					}));
		} else {
			return inp;
		}
	});
var _user$project$InputUpdate$updateInputAttribute = F3(
	function (updateFunc, model, newPlaceholder) {
		var _p13 = _user$project$Models$currentlyEdditedInput(model);
		if (_p13.ctor === 'Nothing') {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		} else {
			var _p14 = _p13._0;
			var updatedInput = A2(updateFunc, _p14, newPlaceholder);
			var newInputs = A2(
				_elm_lang$core$List$map,
				function (inp) {
					return _elm_lang$core$Native_Utils.eq(
						_user$project$FormModel$extractId(inp),
						_user$project$FormModel$extractId(_p14)) ? updatedInput : inp;
				},
				model.form);
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{form: newInputs}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		}
	});
var _user$project$InputUpdate$update = F2(
	function (msg, model) {
		var _p15 = msg;
		switch (_p15.ctor) {
			case 'PlaceholderEdit':
				return A3(_user$project$InputUpdate$updateInputAttribute, _user$project$InputUpdate$placeholderUpdateFunc, model, _p15._0);
			case 'LabelEdit':
				return A3(_user$project$InputUpdate$updateInputAttribute, _user$project$InputUpdate$labelUpdateFunc, model, _p15._0);
			case 'SmallEdit':
				return A3(_user$project$InputUpdate$updateInputAttribute, _user$project$InputUpdate$smallUpdateFunc, model, _p15._0);
			case 'DisabledEdit':
				return A3(_user$project$InputUpdate$updateInputAttribute, _user$project$InputUpdate$disabledUpdateFunc, model, _p15._0);
			case 'ReadonlyEdit':
				return A3(_user$project$InputUpdate$updateInputAttribute, _user$project$InputUpdate$readonlyUpdateFunc, model, _p15._0);
			case 'FirstAddonEdit':
				return A3(_user$project$InputUpdate$updateInputAttribute, _user$project$InputUpdate$firstAddonEditFunc, model, _p15._0);
			case 'SecondAddonEdit':
				return A3(_user$project$InputUpdate$updateInputAttribute, _user$project$InputUpdate$secondAddonEditFunc, model, _p15._0);
			case 'SizeEdit':
				return A3(_user$project$InputUpdate$updateInputAttribute, _user$project$InputUpdate$sizeEditFunc, model, _p15._0);
			case 'TypeEdit':
				return A3(_user$project$InputUpdate$updateInputAttribute, _user$project$InputUpdate$typeEditFunc, model, _p15._0);
			case 'NewOptionEdit':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newOption: _p15._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SaveNewOption':
				return A3(_user$project$InputUpdate$updateInputAttribute, _user$project$InputUpdate$addNewOptionFunc, model, model.newOption);
			default:
				return A3(_user$project$InputUpdate$updateInputAttribute, _user$project$InputUpdate$removeOptionFunc, model, _p15._0);
		}
	});
