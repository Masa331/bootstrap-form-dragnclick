var _user$project$InputUpdate$updateReadonly = F2(
	function (newReadonly, input) {
		return _elm_lang$core$Native_Utils.update(
			input,
			{readonly: newReadonly});
	});
var _user$project$InputUpdate$updateDisabled = F2(
	function (newDisabled, input) {
		return _elm_lang$core$Native_Utils.update(
			input,
			{disabled: newDisabled});
	});
var _user$project$InputUpdate$updateSmall = F2(
	function (newSmall, input) {
		return _elm_lang$core$Native_Utils.update(
			input,
			{
				small: _elm_lang$core$Maybe$Just(newSmall)
			});
	});
var _user$project$InputUpdate$updateSecondAddon = F2(
	function (newAddon, inp) {
		var wrappedAddon = _elm_lang$core$Native_Utils.eq(newAddon, '') ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(newAddon);
		return _elm_lang$core$Native_Utils.update(
			inp,
			{addon2: wrappedAddon});
	});
var _user$project$InputUpdate$updateFirstAddon = F2(
	function (newAddon, inp) {
		var wrappedAddon = _elm_lang$core$Native_Utils.eq(newAddon, '') ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(newAddon);
		return _elm_lang$core$Native_Utils.update(
			inp,
			{addon1: wrappedAddon});
	});
var _user$project$InputUpdate$updateType = F2(
	function (newType, input) {
		return _elm_lang$core$Native_Utils.update(
			input,
			{
				type$: _user$project$FormModel$textToType(newType)
			});
	});
var _user$project$InputUpdate$updateRowNumber = F2(
	function (newRowNumber, input) {
		return _elm_lang$core$Native_Utils.update(
			input,
			{rowNumber: newRowNumber});
	});
var _user$project$InputUpdate$updateSize = F2(
	function (newSize, input) {
		return _elm_lang$core$Native_Utils.update(
			input,
			{
				size: _user$project$FormModel$textToSize(newSize)
			});
	});
var _user$project$InputUpdate$addNewOption = F2(
	function (newOption, input) {
		return _elm_lang$core$Native_Utils.update(
			input,
			{
				options: A2(_elm_lang$core$List_ops['::'], newOption, input.options)
			});
	});
var _user$project$InputUpdate$removeOption = F2(
	function (newOption, inp) {
		var func = function (neco) {
			return _elm_lang$core$Native_Utils.eq(newOption, neco) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(neco);
		};
		return _elm_lang$core$Native_Utils.update(
			inp,
			{
				options: A2(
					_elm_lang$core$List$filterMap,
					_elm_lang$core$Basics$identity,
					A2(_elm_lang$core$List$map, func, inp.options))
			});
	});
var _user$project$InputUpdate$updatePlaceholder = F2(
	function (newPlaceholder, input) {
		return _elm_lang$core$Native_Utils.update(
			input,
			{
				placeholder: _elm_lang$core$Maybe$Just(newPlaceholder)
			});
	});
var _user$project$InputUpdate$updateLabel = F2(
	function (newLabel, input) {
		return _elm_lang$core$Native_Utils.update(
			input,
			{
				label: _elm_lang$core$Maybe$Just(newLabel)
			});
	});
var _user$project$InputUpdate$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'PlaceholderEdit':
				return A3(
					_user$project$FormModel$updateInput,
					model,
					_p0._0,
					_user$project$InputUpdate$updatePlaceholder(_p0._1));
			case 'LabelEdit':
				return A3(
					_user$project$FormModel$updateInput,
					model,
					_p0._0,
					_user$project$InputUpdate$updateLabel(_p0._1));
			case 'SmallEdit':
				return A3(
					_user$project$FormModel$updateInput,
					model,
					_p0._0,
					_user$project$InputUpdate$updateSmall(_p0._1));
			case 'DisabledEdit':
				return A3(
					_user$project$FormModel$updateInput,
					model,
					_p0._0,
					_user$project$InputUpdate$updateDisabled(_p0._1));
			case 'ReadonlyEdit':
				return A3(
					_user$project$FormModel$updateInput,
					model,
					_p0._0,
					_user$project$InputUpdate$updateReadonly(_p0._1));
			case 'FirstAddonEdit':
				return A3(
					_user$project$FormModel$updateInput,
					model,
					_p0._0,
					_user$project$InputUpdate$updateFirstAddon(_p0._1));
			case 'SecondAddonEdit':
				return A3(
					_user$project$FormModel$updateInput,
					model,
					_p0._0,
					_user$project$InputUpdate$updateSecondAddon(_p0._1));
			case 'SizeEdit':
				return A3(
					_user$project$FormModel$updateInput,
					model,
					_p0._0,
					_user$project$InputUpdate$updateSize(_p0._1));
			case 'TypeEdit':
				return A3(
					_user$project$FormModel$updateInput,
					model,
					_p0._0,
					_user$project$InputUpdate$updateType(_p0._1));
			case 'RowNumberEdit':
				return A3(
					_user$project$FormModel$updateInput,
					model,
					_p0._0,
					_user$project$InputUpdate$updateRowNumber(_p0._1));
			case 'NewOptionEdit':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newOption: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SaveNewOption':
				return A3(
					_user$project$FormModel$updateInput,
					model,
					_p0._0,
					_user$project$InputUpdate$addNewOption(model.newOption));
			default:
				return A3(
					_user$project$FormModel$updateInput,
					model,
					_p0._0,
					_user$project$InputUpdate$removeOption(_p0._1));
		}
	});
