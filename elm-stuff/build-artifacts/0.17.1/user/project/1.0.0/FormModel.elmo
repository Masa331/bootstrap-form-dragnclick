var _user$project$FormModel$sizeToString = function (_p0) {
	return _elm_lang$core$String$toLower(
		_elm_lang$core$Basics$toString(_p0));
};
var _user$project$FormModel$inputTypeToString = function (type$) {
	var _p1 = type$;
	if (_p1.ctor === 'DatetimeLocal') {
		return 'datetime-local';
	} else {
		return function (_p2) {
			return _elm_lang$core$String$toLower(
				_elm_lang$core$Basics$toString(_p2));
		}(type$);
	}
};
var _user$project$FormModel$Input = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return {type$: a, id: b, classList: c, placeholder: d, label: e, disabled: f, readonly: g, size: h, addon1: i, addon2: j, small: k, rowNumber: l, options: m};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$FormModel$Large = {ctor: 'Large'};
var _user$project$FormModel$Normal = {ctor: 'Normal'};
var _user$project$FormModel$Small = {ctor: 'Small'};
var _user$project$FormModel$textToSize = function (text) {
	var _p3 = text;
	switch (_p3) {
		case 'small':
			return _user$project$FormModel$Small;
		case 'normal':
			return _user$project$FormModel$Normal;
		case 'large':
			return _user$project$FormModel$Large;
		default:
			return _user$project$FormModel$Normal;
	}
};
var _user$project$FormModel$Color = {ctor: 'Color'};
var _user$project$FormModel$Time = {ctor: 'Time'};
var _user$project$FormModel$Week = {ctor: 'Week'};
var _user$project$FormModel$Month = {ctor: 'Month'};
var _user$project$FormModel$Date = {ctor: 'Date'};
var _user$project$FormModel$DatetimeLocal = {ctor: 'DatetimeLocal'};
var _user$project$FormModel$Number = {ctor: 'Number'};
var _user$project$FormModel$Password = {ctor: 'Password'};
var _user$project$FormModel$Tel = {ctor: 'Tel'};
var _user$project$FormModel$Url = {ctor: 'Url'};
var _user$project$FormModel$Email = {ctor: 'Email'};
var _user$project$FormModel$Search = {ctor: 'Search'};
var _user$project$FormModel$Button = {ctor: 'Button'};
var _user$project$FormModel$Checkbox = {ctor: 'Checkbox'};
var _user$project$FormModel$Radio = {ctor: 'Radio'};
var _user$project$FormModel$FileUpload = {ctor: 'FileUpload'};
var _user$project$FormModel$Multiselect = {ctor: 'Multiselect'};
var _user$project$FormModel$Select = {ctor: 'Select'};
var _user$project$FormModel$TextArea = {ctor: 'TextArea'};
var _user$project$FormModel$Text = {ctor: 'Text'};
var _user$project$FormModel$blankInput = {
	type$: _user$project$FormModel$Text,
	id: 0,
	classList: _elm_lang$core$Native_List.fromArray(
		[]),
	placeholder: _elm_lang$core$Maybe$Nothing,
	label: _elm_lang$core$Maybe$Just('Some label..'),
	disabled: false,
	readonly: false,
	size: _user$project$FormModel$Normal,
	addon1: _elm_lang$core$Maybe$Nothing,
	addon2: _elm_lang$core$Maybe$Nothing,
	small: _elm_lang$core$Maybe$Nothing,
	rowNumber: 1,
	options: _elm_lang$core$Native_List.fromArray(
		[])
};
var _user$project$FormModel$textArea = _elm_lang$core$Native_Utils.update(
	_user$project$FormModel$blankInput,
	{type$: _user$project$FormModel$TextArea, rowNumber: 3});
var _user$project$FormModel$select = _elm_lang$core$Native_Utils.update(
	_user$project$FormModel$blankInput,
	{
		type$: _user$project$FormModel$Select,
		options: _elm_lang$core$Native_List.fromArray(
			['options1', 'option2', 'option3'])
	});
var _user$project$FormModel$multiselect = _elm_lang$core$Native_Utils.update(
	_user$project$FormModel$blankInput,
	{
		type$: _user$project$FormModel$Multiselect,
		options: _elm_lang$core$Native_List.fromArray(
			['options1', 'option2', 'option3'])
	});
var _user$project$FormModel$fileUpload = _elm_lang$core$Native_Utils.update(
	_user$project$FormModel$blankInput,
	{
		type$: _user$project$FormModel$FileUpload,
		classList: _elm_lang$core$Native_List.fromArray(
			['form-control-file'])
	});
var _user$project$FormModel$radio = _elm_lang$core$Native_Utils.update(
	_user$project$FormModel$blankInput,
	{
		type$: _user$project$FormModel$Radio,
		options: _elm_lang$core$Native_List.fromArray(
			['options1', 'option2', 'option3'])
	});
var _user$project$FormModel$checkbox = _elm_lang$core$Native_Utils.update(
	_user$project$FormModel$blankInput,
	{
		type$: _user$project$FormModel$Checkbox,
		classList: _elm_lang$core$Native_List.fromArray(
			['form-control'])
	});
var _user$project$FormModel$button = _elm_lang$core$Native_Utils.update(
	_user$project$FormModel$blankInput,
	{type$: _user$project$FormModel$Button});
var _user$project$FormModel$textInput = _elm_lang$core$Native_Utils.update(
	_user$project$FormModel$blankInput,
	{type$: _user$project$FormModel$Text});
var _user$project$FormModel$textToType = function (text) {
	var _p4 = text;
	switch (_p4) {
		case 'text':
			return _user$project$FormModel$Text;
		case 'search':
			return _user$project$FormModel$Search;
		case 'email':
			return _user$project$FormModel$Email;
		case 'url':
			return _user$project$FormModel$Url;
		case 'tel':
			return _user$project$FormModel$Tel;
		case 'password':
			return _user$project$FormModel$Password;
		case 'number':
			return _user$project$FormModel$Number;
		case 'datetime-local':
			return _user$project$FormModel$DatetimeLocal;
		case 'date':
			return _user$project$FormModel$Date;
		case 'month':
			return _user$project$FormModel$Month;
		case 'week':
			return _user$project$FormModel$Week;
		case 'time':
			return _user$project$FormModel$Time;
		case 'color':
			return _user$project$FormModel$Color;
		default:
			return _user$project$FormModel$Text;
	}
};
