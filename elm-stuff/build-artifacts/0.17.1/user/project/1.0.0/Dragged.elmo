var _user$project$Dragged$toClasses = function (classList) {
	var value = A2(
		_elm_lang$core$String$join,
		' ',
		A2(
			_elm_lang$core$List$filter,
			function ($class) {
				return !_elm_lang$core$Native_Utils.eq($class, '');
			},
			classList));
	return _elm_lang$core$Maybe$Just(
		A2(_user$project$HtmlTree$Attribute, 'class', value));
};
var _user$project$Dragged$sizeClass = function (size) {
	var _p0 = size;
	switch (_p0.ctor) {
		case 'Small':
			return 'form-control-sm';
		case 'Normal':
			return '';
		default:
			return 'form-control-lg';
	}
};
var _user$project$Dragged$toLinks = function (value) {
	var i3 = A5(
		_user$project$HtmlTree$Element,
		'i',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'class', 'fa fa-arrows control')
			]),
		_user$project$HtmlTree$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'',
		_elm_lang$core$Native_List.fromArray(
			[]));
	var l3 = A5(
		_user$project$HtmlTree$Element,
		'span',
		_elm_lang$core$Native_List.fromArray(
			[]),
		_user$project$HtmlTree$Children(
			_elm_lang$core$Native_List.fromArray(
				[i3])),
		'',
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Events$onMouseDown(
				_user$project$Messages$MouseMessage(
					_user$project$Messages$MouseClick(value)))
			]));
	var children = _user$project$HtmlTree$Children(
		_elm_lang$core$Native_List.fromArray(
			[l3]));
	return _elm_lang$core$Maybe$Just(
		A5(
			_user$project$HtmlTree$Element,
			'div',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$HtmlTree$Attribute, 'class', 'edit-and-remove-link')
				]),
			children,
			'',
			_elm_lang$core$Native_List.fromArray(
				[])));
};
var _user$project$Dragged$toType = function (value) {
	return _elm_lang$core$Maybe$Just(
		A2(
			_user$project$HtmlTree$Attribute,
			'type',
			_user$project$FormModel$inputTypeToString(value)));
};
var _user$project$Dragged$toLegend = function (value) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (value) {
			return A5(
				_user$project$HtmlTree$Element,
				'legend',
				_elm_lang$core$Native_List.fromArray(
					[]),
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				value,
				_elm_lang$core$Native_List.fromArray(
					[]));
		},
		value);
};
var _user$project$Dragged$toLabel = function (value) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (value) {
			return A5(
				_user$project$HtmlTree$Element,
				'label',
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$HtmlTree$Attribute, 'for', 'input1')
					]),
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				value,
				_elm_lang$core$Native_List.fromArray(
					[]));
		},
		value);
};
var _user$project$Dragged$toSmall = function (value) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (value) {
			return A5(
				_user$project$HtmlTree$Element,
				'small',
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$HtmlTree$Attribute, 'class', 'form-text text-muted')
					]),
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				value,
				_elm_lang$core$Native_List.fromArray(
					[]));
		},
		value);
};
var _user$project$Dragged$toAddon = function (value) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (value) {
			return A5(
				_user$project$HtmlTree$Element,
				'div',
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$HtmlTree$Attribute, 'class', 'input-group-addon')
					]),
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				value,
				_elm_lang$core$Native_List.fromArray(
					[]));
		},
		value);
};
var _user$project$Dragged$wrapInAddons = F2(
	function (inputAttrs, input) {
		var inputType = function () {
			var _p1 = input.type$;
			if (_p1.ctor === 'TextArea') {
				return 'textarea';
			} else {
				return 'input';
			}
		}();
		var input1 = _elm_lang$core$Maybe$Just(
			A5(
				_user$project$HtmlTree$Element,
				inputType,
				inputAttrs,
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				'',
				_elm_lang$core$Native_List.fromArray(
					[])));
		var add2 = _user$project$Dragged$toAddon(input.addon2);
		var add1 = _user$project$Dragged$toAddon(input.addon1);
		return _elm_lang$core$List$isEmpty(
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				_elm_lang$core$Native_List.fromArray(
					[add1, add2]))) ? input1 : _elm_lang$core$Maybe$Just(
			A5(
				_user$project$HtmlTree$Element,
				'div',
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$HtmlTree$Attribute, 'class', 'input-group')
					]),
				_user$project$HtmlTree$Children(
					A2(
						_elm_lang$core$List$filterMap,
						_elm_lang$core$Basics$identity,
						_elm_lang$core$Native_List.fromArray(
							[add1, input1, add2]))),
				'',
				_elm_lang$core$Native_List.fromArray(
					[])));
	});
var _user$project$Dragged$toReadonly = function (value) {
	return value ? _elm_lang$core$Maybe$Just(
		A2(_user$project$HtmlTree$Attribute, 'readonly', 'readonly')) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$Dragged$toDisabled = function (value) {
	return value ? _elm_lang$core$Maybe$Just(
		A2(_user$project$HtmlTree$Attribute, 'disabled', 'disabled')) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$Dragged$toId = function (value) {
	return _elm_lang$core$Maybe$Just(
		A2(
			_user$project$HtmlTree$Attribute,
			'id',
			A2(
				_elm_lang$core$Basics_ops['++'],
				'input',
				_elm_lang$core$Basics$toString(value))));
};
var _user$project$Dragged$toPlaceholder = function (value) {
	return A2(
		_elm_lang$core$Maybe$map,
		_user$project$HtmlTree$Attribute('placeholder'),
		value);
};
var _user$project$Dragged$buttonToHtmlTree = function (inp) {
	var children = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Maybe$Just(
				A5(
					_user$project$HtmlTree$Element,
					'button',
					_elm_lang$core$Native_List.fromArray(
						[
							A2(_user$project$HtmlTree$Attribute, 'type', 'submit'),
							A2(_user$project$HtmlTree$Attribute, 'class', 'btn btn-primary')
						]),
					_user$project$HtmlTree$Children(
						_elm_lang$core$Native_List.fromArray(
							[])),
					A2(_elm_lang$core$Maybe$withDefault, 'Submit', inp.label),
					_elm_lang$core$Native_List.fromArray(
						[]))),
				_user$project$Dragged$toLinks(inp.id)
			]));
	return A5(
		_user$project$HtmlTree$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'class', 'my-container'),
				A2(
				_user$project$HtmlTree$Attribute,
				'data-input-id',
				_elm_lang$core$Basics$toString(inp.id))
			]),
		_user$project$HtmlTree$Children(children),
		'',
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _user$project$Dragged$checkboxToHtmlTree = function (inp) {
	var links = _user$project$Dragged$toLinks(inp.id);
	var input = A5(
		_user$project$HtmlTree$Element,
		'input',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'type', 'checkbox'),
				A2(_user$project$HtmlTree$Attribute, 'class', 'form-check-input')
			]),
		_user$project$HtmlTree$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'',
		_elm_lang$core$Native_List.fromArray(
			[]));
	var label = function () {
		var _p2 = inp.label;
		if (_p2.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Just(
				A5(
					_user$project$HtmlTree$Element,
					'label',
					_elm_lang$core$Native_List.fromArray(
						[
							A2(_user$project$HtmlTree$Attribute, 'class', 'form-check-label')
						]),
					_user$project$HtmlTree$Children(
						_elm_lang$core$Native_List.fromArray(
							[input])),
					'',
					_elm_lang$core$Native_List.fromArray(
						[])));
		} else {
			return _elm_lang$core$Maybe$Just(
				A5(
					_user$project$HtmlTree$Element,
					'label',
					_elm_lang$core$Native_List.fromArray(
						[
							A2(_user$project$HtmlTree$Attribute, 'class', 'form-check-label')
						]),
					_user$project$HtmlTree$Children(
						_elm_lang$core$Native_List.fromArray(
							[input])),
					_p2._0,
					_elm_lang$core$Native_List.fromArray(
						[])));
		}
	}();
	var children = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[label, links]));
	return A5(
		_user$project$HtmlTree$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'class', 'form-check'),
				A2(
				_user$project$HtmlTree$Attribute,
				'data-input-id',
				_elm_lang$core$Basics$toString(inp.id))
			]),
		_user$project$HtmlTree$Children(children),
		'',
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _user$project$Dragged$toRadioOption = F4(
	function (id, index, value, disabled) {
		var inputAttrs = A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$core$Maybe$Just(
					A2(_user$project$HtmlTree$Attribute, 'type', 'radio')),
					_elm_lang$core$Maybe$Just(
					A2(_user$project$HtmlTree$Attribute, 'class', 'form-check-input')),
					_elm_lang$core$Maybe$Just(
					A2(
						_user$project$HtmlTree$Attribute,
						'name',
						_elm_lang$core$Basics$toString(id))),
					_elm_lang$core$Maybe$Just(
					A2(
						_user$project$HtmlTree$Attribute,
						'id',
						_elm_lang$core$Basics$toString(id))),
					_elm_lang$core$Maybe$Just(
					A2(_user$project$HtmlTree$Attribute, 'value', value)),
					disabled
				]));
		var input = A5(
			_user$project$HtmlTree$Element,
			'input',
			inputAttrs,
			_user$project$HtmlTree$Children(
				_elm_lang$core$Native_List.fromArray(
					[])),
			'',
			_elm_lang$core$Native_List.fromArray(
				[]));
		var children = A5(
			_user$project$HtmlTree$Element,
			'label',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$HtmlTree$Attribute, 'class', 'form-check-label')
				]),
			_user$project$HtmlTree$Children(
				_elm_lang$core$Native_List.fromArray(
					[input])),
			value,
			_elm_lang$core$Native_List.fromArray(
				[]));
		return A5(
			_user$project$HtmlTree$Element,
			'div',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$HtmlTree$Attribute, 'class', 'form-check')
				]),
			_user$project$HtmlTree$Children(
				_elm_lang$core$Native_List.fromArray(
					[children])),
			'',
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _user$project$Dragged$radioToHtmlTree = function (inp) {
	var options = A2(
		_elm_lang$core$List$map,
		function (value) {
			return _elm_lang$core$Maybe$Just(
				A4(
					_user$project$Dragged$toRadioOption,
					inp.id,
					1,
					value,
					_user$project$Dragged$toDisabled(inp.disabled)));
		},
		inp.options);
	var children = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Native_List.fromArray(
				[
					_user$project$Dragged$toLegend(inp.label)
				]),
			A2(
				_elm_lang$core$Basics_ops['++'],
				options,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Native_List.fromArray(
						[
							_user$project$Dragged$toSmall(inp.small)
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_user$project$Dragged$toLinks(inp.id)
						])))));
	return A5(
		_user$project$HtmlTree$Element,
		'fieldset',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'class', 'form-group'),
				A2(
				_user$project$HtmlTree$Attribute,
				'data-input-id',
				_elm_lang$core$Basics$toString(inp.id))
			]),
		_user$project$HtmlTree$Children(children),
		'',
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _user$project$Dragged$fileUploadToHtmlTree = function (inp) {
	var inputAttrs = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Dragged$toId(inp.id),
				_user$project$Dragged$toDisabled(inp.disabled),
				_user$project$Dragged$toClasses(
				A2(
					_elm_lang$core$List_ops['::'],
					_user$project$Dragged$sizeClass(inp.size),
					inp.classList)),
				_elm_lang$core$Maybe$Just(
				A2(_user$project$HtmlTree$Attribute, 'type', 'file'))
			]));
	var children = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Dragged$toLabel(inp.label),
				_elm_lang$core$Maybe$Just(
				A5(
					_user$project$HtmlTree$Element,
					'input',
					inputAttrs,
					_user$project$HtmlTree$Children(
						_elm_lang$core$Native_List.fromArray(
							[])),
					'',
					_elm_lang$core$Native_List.fromArray(
						[]))),
				_user$project$Dragged$toSmall(inp.small),
				_user$project$Dragged$toLinks(inp.id)
			]));
	return A5(
		_user$project$HtmlTree$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'class', 'form-group'),
				A2(
				_user$project$HtmlTree$Attribute,
				'data-input-id',
				_elm_lang$core$Basics$toString(inp.id))
			]),
		_user$project$HtmlTree$Children(children),
		'',
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _user$project$Dragged$multiselectToHtmlTree = function (inp) {
	var options = A2(
		_elm_lang$core$List$map,
		function (value) {
			return A5(
				_user$project$HtmlTree$Element,
				'option',
				_elm_lang$core$Native_List.fromArray(
					[]),
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				value,
				_elm_lang$core$Native_List.fromArray(
					[]));
		},
		inp.options);
	var inputAttrs = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Dragged$toId(inp.id),
				_user$project$Dragged$toDisabled(inp.disabled),
				_user$project$Dragged$toClasses(
				A2(
					_elm_lang$core$List_ops['::'],
					_user$project$Dragged$sizeClass(inp.size),
					_elm_lang$core$Native_List.fromArray(
						['form-control']))),
				_elm_lang$core$Maybe$Just(
				A2(_user$project$HtmlTree$Attribute, 'multiple', 'multiple'))
			]));
	var children = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Dragged$toLabel(inp.label),
				_elm_lang$core$Maybe$Just(
				A5(
					_user$project$HtmlTree$Element,
					'select',
					inputAttrs,
					_user$project$HtmlTree$Children(options),
					'',
					_elm_lang$core$Native_List.fromArray(
						[]))),
				_user$project$Dragged$toSmall(inp.small),
				_user$project$Dragged$toLinks(inp.id)
			]));
	return A5(
		_user$project$HtmlTree$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'class', 'form-group'),
				A2(
				_user$project$HtmlTree$Attribute,
				'data-input-id',
				_elm_lang$core$Basics$toString(inp.id))
			]),
		_user$project$HtmlTree$Children(children),
		'',
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _user$project$Dragged$textAreaToHtmlTree = function (inp) {
	var inputAttrs = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Dragged$toId(inp.id),
				_user$project$Dragged$toPlaceholder(inp.placeholder),
				_user$project$Dragged$toDisabled(inp.disabled),
				_user$project$Dragged$toReadonly(inp.readonly),
				_user$project$Dragged$toClasses(
				_elm_lang$core$Native_List.fromArray(
					['form-control'])),
				_elm_lang$core$Maybe$Just(
				A2(_user$project$HtmlTree$Attribute, 'rows', inp.rowNumber))
			]));
	var children = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Dragged$toLabel(inp.label),
				A2(_user$project$Dragged$wrapInAddons, inputAttrs, inp),
				_user$project$Dragged$toLinks(inp.id)
			]));
	return A5(
		_user$project$HtmlTree$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'class', 'form-group')
			]),
		_user$project$HtmlTree$Children(children),
		'',
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _user$project$Dragged$selectToHtmlTree = function (inp) {
	var options = A2(
		_elm_lang$core$List$map,
		function (value) {
			return A5(
				_user$project$HtmlTree$Element,
				'option',
				_elm_lang$core$Native_List.fromArray(
					[]),
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				value,
				_elm_lang$core$Native_List.fromArray(
					[]));
		},
		inp.options);
	var inputAttrs = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Dragged$toId(inp.id),
				_user$project$Dragged$toDisabled(inp.disabled),
				_user$project$Dragged$toClasses(
				A2(
					_elm_lang$core$List_ops['::'],
					_user$project$Dragged$sizeClass(inp.size),
					_elm_lang$core$Native_List.fromArray(
						['form-control'])))
			]));
	var children = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Dragged$toLabel(inp.label),
				_elm_lang$core$Maybe$Just(
				A5(
					_user$project$HtmlTree$Element,
					'select',
					inputAttrs,
					_user$project$HtmlTree$Children(options),
					'',
					_elm_lang$core$Native_List.fromArray(
						[]))),
				_user$project$Dragged$toSmall(inp.small),
				_user$project$Dragged$toLinks(inp.id)
			]));
	return A5(
		_user$project$HtmlTree$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'class', 'form-group'),
				A2(
				_user$project$HtmlTree$Attribute,
				'data-input-id',
				_elm_lang$core$Basics$toString(inp.id))
			]),
		_user$project$HtmlTree$Children(children),
		'',
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _user$project$Dragged$colorToHtmlTree = function (inp) {
	var inputAttrs = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Dragged$toId(inp.id),
				_user$project$Dragged$toPlaceholder(inp.placeholder),
				_user$project$Dragged$toDisabled(inp.disabled),
				_user$project$Dragged$toReadonly(inp.readonly),
				_user$project$Dragged$toClasses(
				A2(
					_elm_lang$core$List_ops['::'],
					_user$project$Dragged$sizeClass(inp.size),
					_elm_lang$core$Native_List.fromArray(
						['form-control']))),
				_user$project$Dragged$toType(inp.type$)
			]));
	var children = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Dragged$toLabel(inp.label),
				_elm_lang$core$Maybe$Just(
				A5(
					_user$project$HtmlTree$Element,
					'input',
					inputAttrs,
					_user$project$HtmlTree$Children(
						_elm_lang$core$Native_List.fromArray(
							[])),
					'',
					_elm_lang$core$Native_List.fromArray(
						[]))),
				_user$project$Dragged$toSmall(inp.small),
				_user$project$Dragged$toLinks(inp.id)
			]));
	return A5(
		_user$project$HtmlTree$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'class', 'form-group'),
				A2(
				_user$project$HtmlTree$Attribute,
				'data-input-id',
				_elm_lang$core$Basics$toString(inp.id))
			]),
		_user$project$HtmlTree$Children(children),
		'',
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _user$project$Dragged$textInputToHtmlTree = function (inp) {
	var containerClass = A2(
		_user$project$HtmlTree$Attribute,
		'class',
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$core$Maybe$Just('form-group'),
						inp.dragged ? _elm_lang$core$Maybe$Just('dragged') : _elm_lang$core$Maybe$Nothing
					]))));
	var inputAttrs = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Dragged$toId(inp.id),
				_user$project$Dragged$toPlaceholder(inp.placeholder),
				_user$project$Dragged$toDisabled(inp.disabled),
				_user$project$Dragged$toReadonly(inp.readonly),
				_user$project$Dragged$toClasses(
				A2(
					_elm_lang$core$List_ops['::'],
					_user$project$Dragged$sizeClass(inp.size),
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Native_List.fromArray(
							['form-control']),
						inp.classList))),
				_user$project$Dragged$toType(inp.type$)
			]));
	var children = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Dragged$toLabel(inp.label),
				A2(_user$project$Dragged$wrapInAddons, inputAttrs, inp),
				_user$project$Dragged$toSmall(inp.small),
				_user$project$Dragged$toLinks(inp.id)
			]));
	return A5(
		_user$project$HtmlTree$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				containerClass,
				A2(
				_user$project$HtmlTree$Attribute,
				'data-input-id',
				_elm_lang$core$Basics$toString(inp.id))
			]),
		_user$project$HtmlTree$Children(children),
		'',
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _user$project$Dragged$build = function (input) {
	var _p3 = input.type$;
	switch (_p3.ctor) {
		case 'Text':
			return _user$project$Dragged$textInputToHtmlTree(input);
		case 'TextArea':
			return _user$project$Dragged$textAreaToHtmlTree(input);
		case 'Select':
			return _user$project$Dragged$selectToHtmlTree(input);
		case 'Multiselect':
			return _user$project$Dragged$multiselectToHtmlTree(input);
		case 'FileUpload':
			return _user$project$Dragged$fileUploadToHtmlTree(input);
		case 'Radio':
			return _user$project$Dragged$radioToHtmlTree(input);
		case 'Checkbox':
			return _user$project$Dragged$checkboxToHtmlTree(input);
		case 'Button':
			return _user$project$Dragged$buttonToHtmlTree(input);
		case 'Color':
			return _user$project$Dragged$colorToHtmlTree(input);
		default:
			return _user$project$Dragged$textInputToHtmlTree(input);
	}
};
