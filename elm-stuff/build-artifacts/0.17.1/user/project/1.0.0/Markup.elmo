var _user$project$Markup$textAreaCode = function (inp) {
	var line4 = '  </div>';
	var line3 = '    <textarea class=\"form-control\" id=\"input2\" rows=3>';
	var line2 = '    <label for=\"input2\">Input 2</label>';
	var line1 = '  <div class=\"form-group\">';
	return A2(
		_elm_lang$core$String$join,
		'\n',
		_elm_lang$core$Native_List.fromArray(
			[line1, line2, line3, line4]));
};
var _user$project$Markup$textInputCode = function (inp) {
	var line4 = '  </div>';
	var line3 = '    <input type=\"text\" class=\"form-control\" id=\"input1\" placeholder=\"neco\">';
	var line2 = '    <label for=\"input1\">Input 1</label>';
	var line1 = '  <div class=\"form-group\">';
	return A2(
		_elm_lang$core$String$join,
		'\n',
		_elm_lang$core$Native_List.fromArray(
			[line1, line2, line3, line4]));
};
var _user$project$Markup$inputMarkup = function (el) {
	var _p0 = el;
	switch (_p0.ctor) {
		case 'TextInput':
			return _user$project$Markup$textInputCode(el);
		case 'TextArea':
			return _user$project$Markup$textAreaCode(el);
		default:
			return _user$project$Markup$textInputCode(el);
	}
};
var _user$project$Markup$inputView = function (inp) {
	return A2(
		_elm_lang$html$Html$pre,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'<form>\n',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Markup$inputMarkup(inp),
						'\n</form>')))
			]));
};
var _user$project$Markup$view = function (model) {
	var inputs = A2(_elm_lang$core$List$map, _user$project$Markup$inputMarkup, model.form);
	var inputsString = A2(_elm_lang$core$String$join, '\n', inputs);
	return A2(
		_elm_lang$html$Html$pre,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'<form>\n',
					A2(_elm_lang$core$Basics_ops['++'], inputsString, '\n</form>')))
			]));
};
