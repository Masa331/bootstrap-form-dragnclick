var _user$project$Models$isDeletable = function (model) {
	return _elm_lang$core$Native_Utils.eq(model.tag, 'editLinks') ? true : false;
};
var _user$project$Models$voidElementsList = _elm_lang$core$Native_List.fromArray(
	['area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr']);
var _user$project$Models$isVoid = function (element) {
	return A2(_elm_lang$core$List$member, element.tag, _user$project$Models$voidElementsList);
};
var _user$project$Models$typeToText = function (type$) {
	var _p0 = type$;
	switch (_p0.ctor) {
		case 'Text':
			return 'text';
		case 'Search':
			return 'search';
		case 'Email':
			return 'email';
		case 'Url':
			return 'url';
		case 'Tel':
			return 'tel';
		case 'Password':
			return 'password';
		case 'Number':
			return 'number';
		case 'DatetimeLocal':
			return 'datetime-local';
		case 'Date':
			return 'date';
		case 'Month':
			return 'month';
		case 'Week':
			return 'week';
		case 'Time':
			return 'time';
		default:
			return 'color';
	}
};
var _user$project$Models$extractOptions = function (inp) {
	var _p1 = inp;
	if (_p1.ctor === 'Select') {
		return _p1._0.options;
	} else {
		return _elm_lang$core$Native_List.fromArray(
			[]);
	}
};
var _user$project$Models$extractAddon2 = function (inp) {
	var _p2 = inp;
	if (_p2.ctor === 'TextInput') {
		return _p2._0.addon2;
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Models$extractAddon1 = function (inp) {
	var _p3 = inp;
	if (_p3.ctor === 'TextInput') {
		return _p3._0.addon1;
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Models$extractSmall = function (inp) {
	var _p4 = inp;
	switch (_p4.ctor) {
		case 'TextInput':
			return _p4._0.small;
		case 'Select':
			return _p4._0.small;
		default:
			return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Models$extractReadonly = function (inp) {
	var _p5 = inp;
	if (_p5.ctor === 'TextInput') {
		return _p5._0.readonly;
	} else {
		return false;
	}
};
var _user$project$Models$extractDisabled = function (inp) {
	var _p6 = inp;
	switch (_p6.ctor) {
		case 'TextInput':
			return _p6._0.disabled;
		case 'Select':
			return _p6._0.disabled;
		default:
			return false;
	}
};
var _user$project$Models$extractLabel = function (inp) {
	var _p7 = inp;
	switch (_p7.ctor) {
		case 'TextInput':
			return _p7._0.label;
		case 'Select':
			return _p7._0.label;
		default:
			return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Models$extractPlaceholder = function (inp) {
	var _p8 = inp;
	if (_p8.ctor === 'TextInput') {
		return _p8._0.placeholder;
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Models$extractId = function (inp) {
	var _p9 = inp;
	switch (_p9.ctor) {
		case 'TextInput':
			return _p9._0.id;
		case 'TextArea':
			return _p9._0.id;
		case 'Select':
			return _p9._0.id;
		case 'Multiselect':
			return _p9._0.id;
		case 'FileUpload':
			return _p9._0.id;
		case 'Radio':
			return _p9._0.id;
		case 'Checkbox':
			return _p9._0.id;
		default:
			return _p9._0.id;
	}
};
var _user$project$Models$Attribute = F2(
	function (a, b) {
		return {name: a, value: b};
	});
var _user$project$Models$Element = F4(
	function (a, b, c, d) {
		return {tag: a, attributes: b, children: c, value: d};
	});
var _user$project$Models$Model = F3(
	function (a, b, c) {
		return {form: a, currentlyEdditedInputId: b, newOption: c};
	});
var _user$project$Models$Children = function (a) {
	return {ctor: 'Children', _0: a};
};
var _user$project$Models$editAndRemoveLink2 = function (inp) {
	var separator = A4(
		_user$project$Models$Element,
		'span',
		_elm_lang$core$Native_List.fromArray(
			[]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		' | ');
	var l4 = A4(
		_user$project$Models$Element,
		'a',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Models$Attribute, 'href', 'javascript:void(0);')
			]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'Move down');
	var l3 = A4(
		_user$project$Models$Element,
		'a',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Models$Attribute, 'href', 'javascript:void(0);')
			]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'Move up');
	var l2 = A4(
		_user$project$Models$Element,
		'a',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Models$Attribute, 'href', 'javascript:void(0);')
			]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'Remove');
	var l1 = A4(
		_user$project$Models$Element,
		'a',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Models$Attribute, 'href', 'javascript:void(0);')
			]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'Edit');
	return A4(
		_user$project$Models$Element,
		'editLinks',
		_elm_lang$core$Native_List.fromArray(
			[]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		_elm_lang$core$Basics$toString(
			_user$project$Models$extractId(inp)));
};
var _user$project$Models$textInputToHtmlTree = F2(
	function (inp, attrs) {
		var inputType = _elm_lang$core$Maybe$Just(
			A2(
				_user$project$Models$Attribute,
				'type',
				_user$project$Models$typeToText(attrs.type$)));
		var sizeClass = function () {
			var _p10 = attrs.size;
			switch (_p10.ctor) {
				case 'Small':
					return 'form-control-sm';
				case 'Normal':
					return '';
				default:
					return 'form-control-lg';
			}
		}();
		var inputClasses = _elm_lang$core$Maybe$Just(
			A2(
				_user$project$Models$Attribute,
				'class',
				A2(
					_elm_lang$core$String$join,
					' ',
					A2(_elm_lang$core$List_ops['::'], sizeClass, attrs.classList))));
		var readonly = attrs.readonly ? _elm_lang$core$Maybe$Just(
			A2(_user$project$Models$Attribute, 'readonly', 'readonly')) : _elm_lang$core$Maybe$Nothing;
		var disabled = attrs.disabled ? _elm_lang$core$Maybe$Just(
			A2(_user$project$Models$Attribute, 'disabled', 'disabled')) : _elm_lang$core$Maybe$Nothing;
		var placeholder = A2(
			_elm_lang$core$Maybe$map,
			_user$project$Models$Attribute('placeholder'),
			attrs.placeholder);
		var id = _elm_lang$core$Maybe$Just(
			A2(
				_user$project$Models$Attribute,
				'id',
				A2(
					_elm_lang$core$Basics_ops['++'],
					'input',
					_elm_lang$core$Basics$toString(attrs.id))));
		var inputAttrs = A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			_elm_lang$core$Native_List.fromArray(
				[id, inputClasses, placeholder, inputType, readonly, disabled]));
		var input1 = _elm_lang$core$Maybe$Just(
			A4(
				_user$project$Models$Element,
				'input',
				inputAttrs,
				_user$project$Models$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				''));
		var addFunc = function (value) {
			return A4(
				_user$project$Models$Element,
				'div',
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$Models$Attribute, 'class', 'input-group-addon')
					]),
				_user$project$Models$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				value);
		};
		var add1 = A2(_elm_lang$core$Maybe$map, addFunc, attrs.addon1);
		var add2 = A2(_elm_lang$core$Maybe$map, addFunc, attrs.addon2);
		var input = (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(
				A2(
					_elm_lang$core$List$filterMap,
					_elm_lang$core$Basics$identity,
					_elm_lang$core$Native_List.fromArray(
						[add1, add2]))),
			0) > 0) ? _elm_lang$core$Maybe$Just(
			A4(
				_user$project$Models$Element,
				'div',
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$Models$Attribute, 'class', 'input-group')
					]),
				_user$project$Models$Children(
					A2(
						_elm_lang$core$List$filterMap,
						_elm_lang$core$Basics$identity,
						_elm_lang$core$Native_List.fromArray(
							[add1, input1, add2]))),
				'')) : input1;
		var links = _elm_lang$core$Maybe$Just(
			_user$project$Models$editAndRemoveLink2(inp));
		var smallFunc = function (value) {
			return A4(
				_user$project$Models$Element,
				'small',
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$Models$Attribute, 'class', 'form-text text-muted')
					]),
				_user$project$Models$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				value);
		};
		var smallText = A2(_elm_lang$core$Maybe$map, smallFunc, attrs.small);
		var labelFunc = function (value) {
			return A4(
				_user$project$Models$Element,
				'label',
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$Models$Attribute, 'for', 'input1')
					]),
				_user$project$Models$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				'Input1');
		};
		var inputLabel = A2(_elm_lang$core$Maybe$map, labelFunc, attrs.label);
		return A4(
			_user$project$Models$Element,
			'div',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$Models$Attribute, 'class', 'form-group')
				]),
			_user$project$Models$Children(
				A2(
					_elm_lang$core$List$filterMap,
					_elm_lang$core$Basics$identity,
					_elm_lang$core$Native_List.fromArray(
						[inputLabel, input, smallText, links]))),
			'');
	});
var _user$project$Models$textAreaToHtmlTree = function () {
	var inputAttrs = _elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Models$Attribute, 'type', 'text'),
			A2(_user$project$Models$Attribute, 'class', 'form-control'),
			A2(_user$project$Models$Attribute, 'id', 'input1')
		]);
	var input = A4(
		_user$project$Models$Element,
		'input',
		inputAttrs,
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'');
	var label = A4(
		_user$project$Models$Element,
		'label',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Models$Attribute, 'for', 'input1')
			]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'Input1');
	return A4(
		_user$project$Models$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Models$Attribute, 'class', 'form-group')
			]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[label, input])),
		'');
}();
var _user$project$Models$selectToHtmlTree = function () {
	var inputAttrs = _elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Models$Attribute, 'type', 'text'),
			A2(_user$project$Models$Attribute, 'class', 'form-control'),
			A2(_user$project$Models$Attribute, 'id', 'input1')
		]);
	var input = A4(
		_user$project$Models$Element,
		'input',
		inputAttrs,
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'');
	var label = A4(
		_user$project$Models$Element,
		'label',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Models$Attribute, 'for', 'input1')
			]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'Input1');
	return A4(
		_user$project$Models$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Models$Attribute, 'class', 'form-group')
			]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[label, input])),
		'');
}();
var _user$project$Models$multiselectToHtmlTree = function () {
	var inputAttrs = _elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Models$Attribute, 'type', 'text'),
			A2(_user$project$Models$Attribute, 'class', 'form-control'),
			A2(_user$project$Models$Attribute, 'id', 'input1')
		]);
	var input = A4(
		_user$project$Models$Element,
		'input',
		inputAttrs,
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'');
	var label = A4(
		_user$project$Models$Element,
		'label',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Models$Attribute, 'for', 'input1')
			]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'Input1');
	return A4(
		_user$project$Models$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Models$Attribute, 'class', 'form-group')
			]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[label, input])),
		'');
}();
var _user$project$Models$fileUploadToHtmlTree = function () {
	var inputAttrs = _elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Models$Attribute, 'type', 'text'),
			A2(_user$project$Models$Attribute, 'class', 'form-control'),
			A2(_user$project$Models$Attribute, 'id', 'input1')
		]);
	var input = A4(
		_user$project$Models$Element,
		'input',
		inputAttrs,
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'');
	var label = A4(
		_user$project$Models$Element,
		'label',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Models$Attribute, 'for', 'input1')
			]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'Input1');
	return A4(
		_user$project$Models$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Models$Attribute, 'class', 'form-group')
			]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[label, input])),
		'');
}();
var _user$project$Models$radioToHtmlTree = function () {
	var inputAttrs = _elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Models$Attribute, 'type', 'text'),
			A2(_user$project$Models$Attribute, 'class', 'form-control'),
			A2(_user$project$Models$Attribute, 'id', 'input1')
		]);
	var input = A4(
		_user$project$Models$Element,
		'input',
		inputAttrs,
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'');
	var label = A4(
		_user$project$Models$Element,
		'label',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Models$Attribute, 'for', 'input1')
			]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'Input1');
	return A4(
		_user$project$Models$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Models$Attribute, 'class', 'form-group')
			]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[label, input])),
		'');
}();
var _user$project$Models$checkboxToHtmlTree = function () {
	var inputAttrs = _elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Models$Attribute, 'type', 'text'),
			A2(_user$project$Models$Attribute, 'class', 'form-control'),
			A2(_user$project$Models$Attribute, 'id', 'input1')
		]);
	var input = A4(
		_user$project$Models$Element,
		'input',
		inputAttrs,
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'');
	var label = A4(
		_user$project$Models$Element,
		'label',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Models$Attribute, 'for', 'input1')
			]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'Input1');
	return A4(
		_user$project$Models$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Models$Attribute, 'class', 'form-group')
			]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[label, input])),
		'');
}();
var _user$project$Models$buttonToHtmlTree = function () {
	var inputAttrs = _elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Models$Attribute, 'type', 'text'),
			A2(_user$project$Models$Attribute, 'class', 'form-control'),
			A2(_user$project$Models$Attribute, 'id', 'input1')
		]);
	var input = A4(
		_user$project$Models$Element,
		'input',
		inputAttrs,
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'');
	var label = A4(
		_user$project$Models$Element,
		'label',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Models$Attribute, 'for', 'input1')
			]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'Input1');
	return A4(
		_user$project$Models$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$Models$Attribute, 'class', 'form-group')
			]),
		_user$project$Models$Children(
			_elm_lang$core$Native_List.fromArray(
				[label, input])),
		'');
}();
var _user$project$Models$inputToHtmlTree = function (input) {
	var _p11 = input;
	switch (_p11.ctor) {
		case 'TextInput':
			return A2(_user$project$Models$textInputToHtmlTree, input, _p11._0);
		case 'TextArea':
			return _user$project$Models$textAreaToHtmlTree;
		case 'Select':
			return _user$project$Models$selectToHtmlTree;
		case 'Multiselect':
			return _user$project$Models$multiselectToHtmlTree;
		case 'FileUpload':
			return _user$project$Models$fileUploadToHtmlTree;
		case 'Radio':
			return _user$project$Models$radioToHtmlTree;
		case 'Checkbox':
			return _user$project$Models$checkboxToHtmlTree;
		default:
			return _user$project$Models$buttonToHtmlTree;
	}
};
var _user$project$Models$modelToHtmlTree = function (form) {
	var children = A2(_elm_lang$core$List$map, _user$project$Models$inputToHtmlTree, form);
	return A4(
		_user$project$Models$Element,
		'form',
		_elm_lang$core$Native_List.fromArray(
			[]),
		_user$project$Models$Children(children),
		'');
};
var _user$project$Models$Large = {ctor: 'Large'};
var _user$project$Models$Normal = {ctor: 'Normal'};
var _user$project$Models$extractSize = function (inp) {
	var _p12 = inp;
	switch (_p12.ctor) {
		case 'TextInput':
			return _p12._0.size;
		case 'Select':
			return _p12._0.size;
		default:
			return _user$project$Models$Normal;
	}
};
var _user$project$Models$Small = {ctor: 'Small'};
var _user$project$Models$Color = {ctor: 'Color'};
var _user$project$Models$Time = {ctor: 'Time'};
var _user$project$Models$Week = {ctor: 'Week'};
var _user$project$Models$Month = {ctor: 'Month'};
var _user$project$Models$Date = {ctor: 'Date'};
var _user$project$Models$DatetimeLocal = {ctor: 'DatetimeLocal'};
var _user$project$Models$Number = {ctor: 'Number'};
var _user$project$Models$Password = {ctor: 'Password'};
var _user$project$Models$Tel = {ctor: 'Tel'};
var _user$project$Models$Url = {ctor: 'Url'};
var _user$project$Models$Email = {ctor: 'Email'};
var _user$project$Models$Search = {ctor: 'Search'};
var _user$project$Models$Text = {ctor: 'Text'};
var _user$project$Models$extractType = function (inp) {
	var _p13 = inp;
	if (_p13.ctor === 'TextInput') {
		return _p13._0.type$;
	} else {
		return _user$project$Models$Text;
	}
};
var _user$project$Models$Button = function (a) {
	return {ctor: 'Button', _0: a};
};
var _user$project$Models$Checkbox = function (a) {
	return {ctor: 'Checkbox', _0: a};
};
var _user$project$Models$Radio = function (a) {
	return {ctor: 'Radio', _0: a};
};
var _user$project$Models$FileUpload = function (a) {
	return {ctor: 'FileUpload', _0: a};
};
var _user$project$Models$Multiselect = function (a) {
	return {ctor: 'Multiselect', _0: a};
};
var _user$project$Models$Select = function (a) {
	return {ctor: 'Select', _0: a};
};
var _user$project$Models$TextArea = function (a) {
	return {ctor: 'TextArea', _0: a};
};
var _user$project$Models$TextInput = function (a) {
	return {ctor: 'TextInput', _0: a};
};
var _user$project$Models$new = function () {
	var button = _user$project$Models$Button(
		{
			id: 5,
			classList: _elm_lang$core$Native_List.fromArray(
				['form-control']),
			label: _elm_lang$core$Maybe$Just('Some area')
		});
	var select1 = _user$project$Models$Select(
		{
			id: 4,
			classList: _elm_lang$core$Native_List.fromArray(
				['form-control']),
			label: _elm_lang$core$Maybe$Just('Some select'),
			small: _elm_lang$core$Maybe$Nothing,
			disabled: false,
			size: _user$project$Models$Normal,
			options: _elm_lang$core$Native_List.fromArray(
				['options1', 'option2', 'option3'])
		});
	var checkbox = _user$project$Models$Checkbox(
		{
			id: 3,
			classList: _elm_lang$core$Native_List.fromArray(
				[]),
			label: _elm_lang$core$Maybe$Just('Some area')
		});
	var textArea = _user$project$Models$TextArea(
		{
			id: 2,
			classList: _elm_lang$core$Native_List.fromArray(
				['form-control']),
			placeholder: _elm_lang$core$Maybe$Just('Some placeholder...'),
			label: _elm_lang$core$Maybe$Just('Some area'),
			rowNumber: 3
		});
	var textInput = _user$project$Models$TextInput(
		{
			id: 1,
			classList: _elm_lang$core$Native_List.fromArray(
				['form-control']),
			placeholder: _elm_lang$core$Maybe$Nothing,
			label: _elm_lang$core$Maybe$Just('Some input'),
			disabled: false,
			readonly: false,
			size: _user$project$Models$Normal,
			addon1: _elm_lang$core$Maybe$Nothing,
			addon2: _elm_lang$core$Maybe$Nothing,
			small: _elm_lang$core$Maybe$Just('haha'),
			type$: _user$project$Models$Text
		});
	return A3(
		_user$project$Models$Model,
		_elm_lang$core$Native_List.fromArray(
			[textInput, textArea, select1, checkbox, button]),
		_elm_lang$core$Maybe$Nothing,
		'');
}();
