var _user$project$InputOptions$readonlyEdit = function (value) {
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$b,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text('Readonly')
				])),
			A2(
			_elm_lang$html$Html$hr,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[])),
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-group')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$label,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('form-check-label')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_lang$html$Html$input,
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html_Attributes$type$('checkbox'),
									_elm_lang$html$Html_Attributes$class('form-check-input'),
									_elm_lang$html$Html_Events$onCheck(
									function (_p0) {
										return _user$project$Messages$InputMessage(
											_user$project$Messages$ReadonlyEdit(_p0));
									}),
									_elm_lang$html$Html_Attributes$checked(value)
								]),
							_elm_lang$core$Native_List.fromArray(
								[]))
						]))
				]))
		]);
};
var _user$project$InputOptions$disabledEdit = function (value) {
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$b,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text('Disabled')
				])),
			A2(
			_elm_lang$html$Html$hr,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[])),
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-group')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$label,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('form-check-label')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_lang$html$Html$input,
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html_Attributes$type$('checkbox'),
									_elm_lang$html$Html_Attributes$class('form-check-input'),
									_elm_lang$html$Html_Events$onCheck(
									function (_p1) {
										return _user$project$Messages$InputMessage(
											_user$project$Messages$DisabledEdit(_p1));
									}),
									_elm_lang$html$Html_Attributes$checked(value)
								]),
							_elm_lang$core$Native_List.fromArray(
								[]))
						]))
				]))
		]);
};
var _user$project$InputOptions$sizeEdit = function (size) {
	var options = function () {
		var _p2 = size;
		switch (_p2.ctor) {
			case 'Small':
				return _elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$option,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$selected(true)
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('small')
							])),
						A2(
						_elm_lang$html$Html$option,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('normal')
							])),
						A2(
						_elm_lang$html$Html$option,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('large')
							]))
					]);
			case 'Normal':
				return _elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$option,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('small')
							])),
						A2(
						_elm_lang$html$Html$option,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$selected(true)
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('normal')
							])),
						A2(
						_elm_lang$html$Html$option,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('large')
							]))
					]);
			default:
				return _elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$option,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('small')
							])),
						A2(
						_elm_lang$html$Html$option,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('normal')
							])),
						A2(
						_elm_lang$html$Html$option,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$selected(true)
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('large')
							]))
					]);
		}
	}();
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$b,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text('Size edit')
				])),
			A2(
			_elm_lang$html$Html$hr,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[])),
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-group')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$select,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('form-control'),
							_elm_lang$html$Html_Events$onInput(
							function (_p3) {
								return _user$project$Messages$InputMessage(
									_user$project$Messages$SizeEdit(_p3));
							})
						]),
					options)
				]))
		]);
};
var _user$project$InputOptions$addon2Edit = function (string) {
	var addonText = function () {
		var _p4 = string;
		if (_p4.ctor === 'Just') {
			return _p4._0;
		} else {
			return '';
		}
	}();
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$b,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text('Second addon')
				])),
			A2(
			_elm_lang$html$Html$hr,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[])),
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-group')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$input,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('form-control'),
							_elm_lang$html$Html_Attributes$value(addonText),
							_elm_lang$html$Html_Events$onInput(
							function (_p5) {
								return _user$project$Messages$InputMessage(
									_user$project$Messages$SecondAddonEdit(_p5));
							})
						]),
					_elm_lang$core$Native_List.fromArray(
						[]))
				]))
		]);
};
var _user$project$InputOptions$addon1Edit = function (string) {
	var addonText = function () {
		var _p6 = string;
		if (_p6.ctor === 'Just') {
			return _p6._0;
		} else {
			return '';
		}
	}();
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$b,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text('First addon')
				])),
			A2(
			_elm_lang$html$Html$hr,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[])),
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-group')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$input,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('form-control'),
							_elm_lang$html$Html_Attributes$value(addonText),
							_elm_lang$html$Html_Events$onInput(
							function (_p7) {
								return _user$project$Messages$InputMessage(
									_user$project$Messages$FirstAddonEdit(_p7));
							})
						]),
					_elm_lang$core$Native_List.fromArray(
						[]))
				]))
		]);
};
var _user$project$InputOptions$typeEdit = function (type$) {
	var actualType = _user$project$Models$typeToText(type$);
	var o = function (optionType) {
		return A2(
			_elm_lang$html$Html$option,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$selected(
					_elm_lang$core$Native_Utils.eq(optionType, actualType) ? true : false)
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(optionType)
				]));
	};
	var options = _elm_lang$core$Native_List.fromArray(
		[
			o('text'),
			o('search'),
			o('email'),
			o('url'),
			o('tel'),
			o('password'),
			o('number'),
			o('datetime-local'),
			o('date'),
			o('month'),
			o('week'),
			o('time'),
			o('color')
		]);
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$b,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text('Text input type')
				])),
			A2(
			_elm_lang$html$Html$hr,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[])),
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-group')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$select,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('form-control'),
							_elm_lang$html$Html_Events$onInput(
							function (_p8) {
								return _user$project$Messages$InputMessage(
									_user$project$Messages$TypeEdit(_p8));
							})
						]),
					options)
				]))
		]);
};
var _user$project$InputOptions$smallUnderEdit = function (string) {
	var smallText = function () {
		var _p9 = string;
		if (_p9.ctor === 'Just') {
			return _p9._0;
		} else {
			return '';
		}
	}();
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$b,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text('Small text under input')
				])),
			A2(
			_elm_lang$html$Html$hr,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[])),
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-group')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$input,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('form-control'),
							_elm_lang$html$Html_Attributes$value(smallText),
							_elm_lang$html$Html_Events$onInput(
							function (_p10) {
								return _user$project$Messages$InputMessage(
									_user$project$Messages$SmallEdit(_p10));
							})
						]),
					_elm_lang$core$Native_List.fromArray(
						[]))
				]))
		]);
};
var _user$project$InputOptions$labelEdit = function (string) {
	var labelText = function () {
		var _p11 = string;
		if (_p11.ctor === 'Just') {
			return _p11._0;
		} else {
			return '';
		}
	}();
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$b,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text('Label')
				])),
			A2(
			_elm_lang$html$Html$hr,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[])),
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-group')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$input,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('form-control'),
							_elm_lang$html$Html_Events$onInput(
							function (_p12) {
								return _user$project$Messages$InputMessage(
									_user$project$Messages$LabelEdit(_p12));
							}),
							_elm_lang$html$Html_Attributes$value(labelText)
						]),
					_elm_lang$core$Native_List.fromArray(
						[]))
				]))
		]);
};
var _user$project$InputOptions$placeholderEdit = function (string) {
	var placeholderText = function () {
		var _p13 = string;
		if (_p13.ctor === 'Just') {
			return _p13._0;
		} else {
			return '';
		}
	}();
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$b,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text('Placeholder')
				])),
			A2(
			_elm_lang$html$Html$hr,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[])),
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-group')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$input,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('form-control'),
							_elm_lang$html$Html_Events$onInput(
							function (_p14) {
								return _user$project$Messages$InputMessage(
									_user$project$Messages$PlaceholderEdit(_p14));
							}),
							_elm_lang$html$Html_Attributes$value(placeholderText)
						]),
					_elm_lang$core$Native_List.fromArray(
						[]))
				]))
		]);
};
var _user$project$InputOptions$view = function (inp) {
	var _p15 = inp;
	if (_p15.ctor === 'TextInput') {
		return _elm_lang$core$List$concat(
			_elm_lang$core$Native_List.fromArray(
				[
					_user$project$InputOptions$placeholderEdit(
					_user$project$Models$extractPlaceholder(inp)),
					_user$project$InputOptions$labelEdit(
					_user$project$Models$extractLabel(inp)),
					_user$project$InputOptions$smallUnderEdit(
					_user$project$Models$extractSmall(inp)),
					_user$project$InputOptions$typeEdit(
					_user$project$Models$extractType(inp)),
					_user$project$InputOptions$addon1Edit(
					_user$project$Models$extractAddon1(inp)),
					_user$project$InputOptions$addon2Edit(
					_user$project$Models$extractAddon2(inp)),
					_user$project$InputOptions$sizeEdit(
					_user$project$Models$extractSize(inp)),
					_user$project$InputOptions$disabledEdit(
					_user$project$Models$extractDisabled(inp)),
					_user$project$InputOptions$readonlyEdit(
					_user$project$Models$extractReadonly(inp))
				]));
	} else {
		return _elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$b,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Not yet implemented ;)')
					]))
			]);
	}
};
