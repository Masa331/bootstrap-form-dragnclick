var _user$project$Form$createAttribute = function (attribute) {
	return _elm_lang$core$Native_Utils.eq(attribute.name, 'rows') ? _elm_lang$html$Html_Attributes$rows(
		_user$project$FormModel$rowsToNumber(attribute.value)) : A2(_elm_lang$html$Html_Attributes$attribute, attribute.name, attribute.value);
};
var _user$project$Form$createAttributes = function (model) {
	return A2(_elm_lang$core$List$map, _user$project$Form$createAttribute, model.attributes);
};
var _user$project$Form$toElmHtmlNode = function (htmlTree) {
	var value = _elm_lang$html$Html$text(htmlTree.value);
	var childs = function (_p0) {
		var _p1 = _p0;
		return _p1._0;
	}(htmlTree.children);
	var attributes = _user$project$Form$createAttributes(htmlTree);
	var node = A2(
		_elm_lang$html$Html$node,
		htmlTree.tag,
		A2(_elm_lang$core$Basics_ops['++'], attributes, htmlTree.events));
	var _p2 = childs;
	if (_p2.ctor === '[]') {
		return _elm_lang$core$Native_List.fromArray(
			[
				node(
				_elm_lang$core$Native_List.fromArray(
					[value]))
			]);
	} else {
		return _elm_lang$core$Native_List.fromArray(
			[
				node(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$List$concat(
						A2(_elm_lang$core$List$map, _user$project$Form$toElmHtmlNode, childs)),
					_elm_lang$core$Native_List.fromArray(
						[value])))
			]);
	}
};
var _user$project$Form$view = function (htmlTree) {
	return _user$project$Form$toElmHtmlNode(htmlTree);
};
