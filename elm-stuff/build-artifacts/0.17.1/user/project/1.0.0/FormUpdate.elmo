var _user$project$FormUpdate$removeInput = F2(
	function (model, id) {
		var filteredForm = A2(
			_elm_lang$core$List$filter,
			function (input) {
				return !_elm_lang$core$Native_Utils.eq(
					_user$project$FormModel$extractId(input),
					id);
			},
			model.form);
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{form: filteredForm}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$FormUpdate$addNewInput = F2(
	function (input, model) {
		var newId = _user$project$Models$maxInputId(model) + 1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{
					form: A2(
						_elm_lang$core$Basics_ops['++'],
						model.form,
						_elm_lang$core$Native_List.fromArray(
							[
								input(newId)
							]))
				}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$FormUpdate$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'AddTextInput':
				return A2(_user$project$FormUpdate$addNewInput, _user$project$FormModel$textInput, model);
			case 'AddTextarea':
				return A2(_user$project$FormUpdate$addNewInput, _user$project$FormModel$textArea, model);
			case 'AddSelect':
				return A2(_user$project$FormUpdate$addNewInput, _user$project$FormModel$select, model);
			case 'AddMultiselect':
				return A2(_user$project$FormUpdate$addNewInput, _user$project$FormModel$multiselect, model);
			case 'AddFileUpload':
				return A2(_user$project$FormUpdate$addNewInput, _user$project$FormModel$fileUpload, model);
			case 'AddRadio':
				return A2(_user$project$FormUpdate$addNewInput, _user$project$FormModel$radio, model);
			case 'AddCheckbox':
				return A2(_user$project$FormUpdate$addNewInput, _user$project$FormModel$checkbox, model);
			case 'AddButton':
				return A2(_user$project$FormUpdate$addNewInput, _user$project$FormModel$button, model);
			case 'RemoveInput':
				return A2(_user$project$FormUpdate$removeInput, model, _p0._0);
			case 'EditInput':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currentlyEdditedInputId: _elm_lang$core$Maybe$Just(_p0._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'StopEditing':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentlyEdditedInputId: _elm_lang$core$Maybe$Nothing}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MoveUp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
