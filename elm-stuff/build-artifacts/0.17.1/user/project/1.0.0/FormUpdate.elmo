var _user$project$FormUpdate$extractMaxId = function (inputs) {
	var allIds = A2(_elm_lang$core$List$map, _user$project$Models$extractId, inputs);
	return A2(
		_elm_lang$core$Maybe$withDefault,
		1,
		_elm_lang$core$List$maximum(allIds));
};
var _user$project$FormUpdate$addInputToForm = F2(
	function (model, inp) {
		var newForm = A2(
			_elm_lang$core$List$append,
			model.form,
			_elm_lang$core$Native_List.fromArray(
				[inp]));
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{form: newForm}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$FormUpdate$countNewInputId = function (model) {
	var actuall = _user$project$FormUpdate$extractMaxId(model.form);
	return actuall + 1;
};
var _user$project$FormUpdate$newButton = function (model) {
	return _user$project$Models$Button(
		{
			id: _user$project$FormUpdate$countNewInputId(model),
			classList: _elm_lang$core$Native_List.fromArray(
				['form-control']),
			label: _elm_lang$core$Maybe$Just('New input')
		});
};
var _user$project$FormUpdate$newCheckbox = function (model) {
	return _user$project$Models$Checkbox(
		{
			id: _user$project$FormUpdate$countNewInputId(model),
			classList: _elm_lang$core$Native_List.fromArray(
				['form-control']),
			label: _elm_lang$core$Maybe$Just('New input')
		});
};
var _user$project$FormUpdate$newRadio = function (model) {
	return _user$project$Models$Radio(
		{
			id: _user$project$FormUpdate$countNewInputId(model),
			classList: _elm_lang$core$Native_List.fromArray(
				['form-control']),
			label: _elm_lang$core$Maybe$Just('New input')
		});
};
var _user$project$FormUpdate$newFileUpload = function (model) {
	return _user$project$Models$FileUpload(
		{
			id: _user$project$FormUpdate$countNewInputId(model),
			classList: _elm_lang$core$Native_List.fromArray(
				['form-control']),
			label: _elm_lang$core$Maybe$Just('New input')
		});
};
var _user$project$FormUpdate$newMultiselect = function (model) {
	return _user$project$Models$Multiselect(
		{
			id: _user$project$FormUpdate$countNewInputId(model),
			classList: _elm_lang$core$Native_List.fromArray(
				['form-control']),
			label: _elm_lang$core$Maybe$Just('New input')
		});
};
var _user$project$FormUpdate$newSelect = function (model) {
	return _user$project$Models$Select(
		{
			id: _user$project$FormUpdate$countNewInputId(model),
			classList: _elm_lang$core$Native_List.fromArray(
				['form-control']),
			label: _elm_lang$core$Maybe$Just('New radio')
		});
};
var _user$project$FormUpdate$newTextArea = function (model) {
	return _user$project$Models$TextArea(
		{
			id: _user$project$FormUpdate$countNewInputId(model),
			classList: _elm_lang$core$Native_List.fromArray(
				['form-control']),
			placeholder: _elm_lang$core$Maybe$Nothing,
			label: _elm_lang$core$Maybe$Just('New input'),
			rowNumber: 3
		});
};
var _user$project$FormUpdate$newTextInput = function (model) {
	return _user$project$Models$TextInput(
		{
			id: _user$project$FormUpdate$countNewInputId(model),
			classList: _elm_lang$core$Native_List.fromArray(
				['form-control']),
			placeholder: _elm_lang$core$Maybe$Nothing,
			label: _elm_lang$core$Maybe$Just('New input')
		});
};
var _user$project$FormUpdate$removeInput = F2(
	function (model, id) {
		var filteredForm = A2(
			_elm_lang$core$List$filter,
			function (input) {
				return !_elm_lang$core$Native_Utils.eq(
					_user$project$Models$extractId(input),
					id);
			},
			model.form);
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{form: filteredForm}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$FormUpdate$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'AddTextInput':
				return A2(
					_user$project$FormUpdate$addInputToForm,
					model,
					_user$project$FormUpdate$newTextInput(model));
			case 'AddTextarea':
				return A2(
					_user$project$FormUpdate$addInputToForm,
					model,
					_user$project$FormUpdate$newTextArea(model));
			case 'AddSelect':
				return A2(
					_user$project$FormUpdate$addInputToForm,
					model,
					_user$project$FormUpdate$newSelect(model));
			case 'AddMultiselect':
				return A2(
					_user$project$FormUpdate$addInputToForm,
					model,
					_user$project$FormUpdate$newMultiselect(model));
			case 'AddFileUpload':
				return A2(
					_user$project$FormUpdate$addInputToForm,
					model,
					_user$project$FormUpdate$newFileUpload(model));
			case 'AddRadio':
				return A2(
					_user$project$FormUpdate$addInputToForm,
					model,
					_user$project$FormUpdate$newRadio(model));
			case 'AddCheckbox':
				return A2(
					_user$project$FormUpdate$addInputToForm,
					model,
					_user$project$FormUpdate$newCheckbox(model));
			case 'AddButton':
				return A2(
					_user$project$FormUpdate$addInputToForm,
					model,
					_user$project$FormUpdate$newButton(model));
			case 'RemoveInput':
				return A2(_user$project$FormUpdate$removeInput, model, _p0._0);
			case 'EditInput':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currentlyEdditedInputId: _elm_lang$core$Maybe$Just(_p0._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentlyEdditedInputId: _elm_lang$core$Maybe$Nothing}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
