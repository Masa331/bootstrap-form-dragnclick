var _user$project$FormUpdate$helper = F3(
	function (lst, id, offset) {
		helper:
		while (true) {
			var _p0 = lst;
			if (_p0.ctor === '[]') {
				return -1;
			} else {
				if (_elm_lang$core$Native_Utils.eq(_p0._0.id, id)) {
					return offset;
				} else {
					var _v1 = _p0._1,
						_v2 = id,
						_v3 = offset + 1;
					lst = _v1;
					id = _v2;
					offset = _v3;
					continue helper;
				}
			}
		}
	});
var _user$project$FormUpdate$getIndexOfElementWithId = F2(
	function (lst, id) {
		return A3(_user$project$FormUpdate$helper, lst, id, 0);
	});
var _user$project$FormUpdate$replace = F3(
	function (index, element, ary) {
		var _p1 = element;
		if (_p1.ctor === 'Nothing') {
			return ary;
		} else {
			return A3(_elm_lang$core$Array$set, index, _p1._0, ary);
		}
	});
var _user$project$FormUpdate$moveRight = F2(
	function (index, a1) {
		var movedLeft = A2(_elm_lang$core$Array$get, index + 1, a1);
		var movedRight = A2(_elm_lang$core$Array$get, index, a1);
		return A3(
			_user$project$FormUpdate$replace,
			index,
			movedLeft,
			A3(_user$project$FormUpdate$replace, index + 1, movedRight, a1));
	});
var _user$project$FormUpdate$moveLeft = F2(
	function (index, a1) {
		var movedLeft = A2(_elm_lang$core$Array$get, index, a1);
		var movedRight = A2(_elm_lang$core$Array$get, index - 1, a1);
		return A3(
			_user$project$FormUpdate$replace,
			index,
			movedRight,
			A3(_user$project$FormUpdate$replace, index - 1, movedLeft, a1));
	});
var _user$project$FormUpdate$removeInput = F2(
	function (model, id) {
		var filteredForm = A2(
			_elm_lang$core$List$filter,
			function (input) {
				return !_elm_lang$core$Native_Utils.eq(input.id, id);
			},
			model.form);
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{form: filteredForm}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$FormUpdate$addNewInput = F2(
	function (input, model) {
		var newId = _user$project$Models$maxInputId(model) + 1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{
					form: A2(
						_elm_lang$core$Basics_ops['++'],
						model.form,
						_elm_lang$core$Native_List.fromArray(
							[
								input(newId)
							]))
				}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$FormUpdate$moveInputUp = F2(
	function (id, model) {
		var ary = _elm_lang$core$Array$fromList(model.form);
		var index = A2(_user$project$FormUpdate$getIndexOfElementWithId, model.form, id);
		var newForm = _elm_lang$core$Array$toList(
			A2(_user$project$FormUpdate$moveLeft, index, ary));
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{form: newForm}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$FormUpdate$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'AddTextInput':
				return A2(_user$project$FormUpdate$addNewInput, _user$project$FormModel$textInput, model);
			case 'AddTextarea':
				return A2(_user$project$FormUpdate$addNewInput, _user$project$FormModel$textArea, model);
			case 'AddSelect':
				return A2(_user$project$FormUpdate$addNewInput, _user$project$FormModel$select, model);
			case 'AddMultiselect':
				return A2(_user$project$FormUpdate$addNewInput, _user$project$FormModel$multiselect, model);
			case 'AddFileUpload':
				return A2(_user$project$FormUpdate$addNewInput, _user$project$FormModel$fileUpload, model);
			case 'AddRadio':
				return A2(_user$project$FormUpdate$addNewInput, _user$project$FormModel$radio, model);
			case 'AddCheckbox':
				return A2(_user$project$FormUpdate$addNewInput, _user$project$FormModel$checkbox, model);
			case 'AddButton':
				return A2(_user$project$FormUpdate$addNewInput, _user$project$FormModel$button, model);
			case 'RemoveInput':
				return A2(_user$project$FormUpdate$removeInput, model, _p2._0);
			case 'EditInput':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currentlyEdditedInputId: _elm_lang$core$Maybe$Just(_p2._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'StopEditing':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentlyEdditedInputId: _elm_lang$core$Maybe$Nothing}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MoveUp':
				return A2(_user$project$FormUpdate$moveInputUp, _p2._0, model);
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
