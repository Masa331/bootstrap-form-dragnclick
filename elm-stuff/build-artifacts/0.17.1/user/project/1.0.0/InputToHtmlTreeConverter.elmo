var _user$project$InputToHtmlTreeConverter$toClasses = F2(
	function (classList, size) {
		var sizeClass = function () {
			var _p0 = size;
			switch (_p0.ctor) {
				case 'Small':
					return 'form-control-sm';
				case 'Normal':
					return '';
				default:
					return 'form-control-lg';
			}
		}();
		return _elm_lang$core$Maybe$Just(
			A2(
				_user$project$HtmlTree$Attribute,
				'class',
				A2(
					_elm_lang$core$String$join,
					' ',
					A2(_elm_lang$core$List_ops['::'], sizeClass, classList))));
	});
var _user$project$InputToHtmlTreeConverter$toLinks = function (value) {
	return _elm_lang$core$Maybe$Just(
		A4(
			_user$project$HtmlTree$Element,
			'editLinks',
			_elm_lang$core$Native_List.fromArray(
				[]),
			_user$project$HtmlTree$Children(
				_elm_lang$core$Native_List.fromArray(
					[])),
			_elm_lang$core$Basics$toString(value)));
};
var _user$project$InputToHtmlTreeConverter$toType = function (value) {
	return _elm_lang$core$Maybe$Just(
		A2(
			_user$project$HtmlTree$Attribute,
			'type',
			_user$project$FormModel$typeToText(value)));
};
var _user$project$InputToHtmlTreeConverter$toLegend = function (value) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (value) {
			return A4(
				_user$project$HtmlTree$Element,
				'legend',
				_elm_lang$core$Native_List.fromArray(
					[]),
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				value);
		},
		value);
};
var _user$project$InputToHtmlTreeConverter$toLabel = function (value) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (value) {
			return A4(
				_user$project$HtmlTree$Element,
				'label',
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$HtmlTree$Attribute, 'for', 'input1')
					]),
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				value);
		},
		value);
};
var _user$project$InputToHtmlTreeConverter$toSmall = function (value) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (value) {
			return A4(
				_user$project$HtmlTree$Element,
				'small',
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$HtmlTree$Attribute, 'class', 'form-text text-muted')
					]),
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				value);
		},
		value);
};
var _user$project$InputToHtmlTreeConverter$toAddon = function (value) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (value) {
			return A4(
				_user$project$HtmlTree$Element,
				'div',
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$HtmlTree$Attribute, 'class', 'input-group-addon')
					]),
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				value);
		},
		value);
};
var _user$project$InputToHtmlTreeConverter$wrapInAddons = F2(
	function (inputAttrs, attrs) {
		var input1 = _elm_lang$core$Maybe$Just(
			A4(
				_user$project$HtmlTree$Element,
				'input',
				inputAttrs,
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				''));
		var add2 = _user$project$InputToHtmlTreeConverter$toAddon(attrs.addon2);
		var add1 = _user$project$InputToHtmlTreeConverter$toAddon(attrs.addon1);
		return _elm_lang$core$List$isEmpty(
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				_elm_lang$core$Native_List.fromArray(
					[add1, add2]))) ? input1 : _elm_lang$core$Maybe$Just(
			A4(
				_user$project$HtmlTree$Element,
				'div',
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$HtmlTree$Attribute, 'class', 'input-group')
					]),
				_user$project$HtmlTree$Children(
					A2(
						_elm_lang$core$List$filterMap,
						_elm_lang$core$Basics$identity,
						_elm_lang$core$Native_List.fromArray(
							[add1, input1, add2]))),
				''));
	});
var _user$project$InputToHtmlTreeConverter$toReadonly = function (value) {
	return value ? _elm_lang$core$Maybe$Just(
		A2(_user$project$HtmlTree$Attribute, 'readonly', 'readonly')) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$InputToHtmlTreeConverter$toDisabled = function (value) {
	return value ? _elm_lang$core$Maybe$Just(
		A2(_user$project$HtmlTree$Attribute, 'disabled', 'disabled')) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$InputToHtmlTreeConverter$toId = function (value) {
	return _elm_lang$core$Maybe$Just(
		A2(
			_user$project$HtmlTree$Attribute,
			'id',
			A2(
				_elm_lang$core$Basics_ops['++'],
				'input',
				_elm_lang$core$Basics$toString(value))));
};
var _user$project$InputToHtmlTreeConverter$toPlaceholder = function (value) {
	return A2(
		_elm_lang$core$Maybe$map,
		_user$project$HtmlTree$Attribute('placeholder'),
		value);
};
var _user$project$InputToHtmlTreeConverter$buttonToHtmlTree = function (inp) {
	var children = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Maybe$Just(
				A4(
					_user$project$HtmlTree$Element,
					'button',
					_elm_lang$core$Native_List.fromArray(
						[
							A2(_user$project$HtmlTree$Attribute, 'type', 'submit'),
							A2(_user$project$HtmlTree$Attribute, 'class', 'btn btn-primary')
						]),
					_user$project$HtmlTree$Children(
						_elm_lang$core$Native_List.fromArray(
							[])),
					A2(_elm_lang$core$Maybe$withDefault, 'Submit', inp.label))),
				_user$project$InputToHtmlTreeConverter$toLinks(inp.id)
			]));
	return A4(
		_user$project$HtmlTree$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'class', 'my-container')
			]),
		_user$project$HtmlTree$Children(children),
		'');
};
var _user$project$InputToHtmlTreeConverter$checkboxToHtmlTree = function (inp) {
	var links = _user$project$InputToHtmlTreeConverter$toLinks(inp.id);
	var input = A4(
		_user$project$HtmlTree$Element,
		'input',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'type', 'checkbox'),
				A2(_user$project$HtmlTree$Attribute, 'class', 'form-check-input')
			]),
		_user$project$HtmlTree$Children(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'');
	var label = function () {
		var _p1 = inp.label;
		if (_p1.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Just(
				A4(
					_user$project$HtmlTree$Element,
					'label',
					_elm_lang$core$Native_List.fromArray(
						[
							A2(_user$project$HtmlTree$Attribute, 'class', 'form-check-label')
						]),
					_user$project$HtmlTree$Children(
						_elm_lang$core$Native_List.fromArray(
							[input])),
					''));
		} else {
			return _elm_lang$core$Maybe$Just(
				A4(
					_user$project$HtmlTree$Element,
					'label',
					_elm_lang$core$Native_List.fromArray(
						[
							A2(_user$project$HtmlTree$Attribute, 'class', 'form-check-label')
						]),
					_user$project$HtmlTree$Children(
						_elm_lang$core$Native_List.fromArray(
							[input])),
					_p1._0));
		}
	}();
	var children = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[label, links]));
	return A4(
		_user$project$HtmlTree$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'class', 'form-check')
			]),
		_user$project$HtmlTree$Children(children),
		'');
};
var _user$project$InputToHtmlTreeConverter$toRadioOption = F3(
	function (id, index, value) {
		var input = A4(
			_user$project$HtmlTree$Element,
			'input',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$HtmlTree$Attribute, 'type', 'radio'),
					A2(_user$project$HtmlTree$Attribute, 'class', 'form-check-input'),
					A2(
					_user$project$HtmlTree$Attribute,
					'name',
					_elm_lang$core$Basics$toString(id)),
					A2(
					_user$project$HtmlTree$Attribute,
					'id',
					_elm_lang$core$Basics$toString(id)),
					A2(_user$project$HtmlTree$Attribute, 'value', value)
				]),
			_user$project$HtmlTree$Children(
				_elm_lang$core$Native_List.fromArray(
					[])),
			'');
		var children = A4(
			_user$project$HtmlTree$Element,
			'label',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$HtmlTree$Attribute, 'class', 'form-check-label')
				]),
			_user$project$HtmlTree$Children(
				_elm_lang$core$Native_List.fromArray(
					[input])),
			value);
		return A4(
			_user$project$HtmlTree$Element,
			'div',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$HtmlTree$Attribute, 'class', 'form-check')
				]),
			_user$project$HtmlTree$Children(
				_elm_lang$core$Native_List.fromArray(
					[children])),
			'');
	});
var _user$project$InputToHtmlTreeConverter$radioToHtmlTree = function (inp) {
	var options = A2(
		_elm_lang$core$List$map,
		function (value) {
			return _elm_lang$core$Maybe$Just(
				A3(_user$project$InputToHtmlTreeConverter$toRadioOption, inp.id, 1, value));
		},
		inp.options);
	var children = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Native_List.fromArray(
				[
					_user$project$InputToHtmlTreeConverter$toLegend(inp.label)
				]),
			A2(
				_elm_lang$core$Basics_ops['++'],
				options,
				_elm_lang$core$Native_List.fromArray(
					[
						_user$project$InputToHtmlTreeConverter$toLinks(inp.id)
					]))));
	return A4(
		_user$project$HtmlTree$Element,
		'fieldset',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'class', 'form-group')
			]),
		_user$project$HtmlTree$Children(children),
		'');
};
var _user$project$InputToHtmlTreeConverter$fileUploadToHtmlTree = function (inp) {
	var inputAttrs = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$InputToHtmlTreeConverter$toId(inp.id),
				_user$project$InputToHtmlTreeConverter$toDisabled(inp.disabled),
				A2(_user$project$InputToHtmlTreeConverter$toClasses, inp.classList, _user$project$FormModel$Normal),
				_elm_lang$core$Maybe$Just(
				A2(_user$project$HtmlTree$Attribute, 'type', 'file'))
			]));
	var children = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$InputToHtmlTreeConverter$toLabel(inp.label),
				_elm_lang$core$Maybe$Just(
				A4(
					_user$project$HtmlTree$Element,
					'input',
					inputAttrs,
					_user$project$HtmlTree$Children(
						_elm_lang$core$Native_List.fromArray(
							[])),
					'')),
				_user$project$InputToHtmlTreeConverter$toSmall(inp.small),
				_user$project$InputToHtmlTreeConverter$toLinks(inp.id)
			]));
	return A4(
		_user$project$HtmlTree$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'class', 'form-group')
			]),
		_user$project$HtmlTree$Children(children),
		'');
};
var _user$project$InputToHtmlTreeConverter$multiselectToHtmlTree = function (inp) {
	var options = A2(
		_elm_lang$core$List$map,
		function (value) {
			return A4(
				_user$project$HtmlTree$Element,
				'option',
				_elm_lang$core$Native_List.fromArray(
					[]),
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				value);
		},
		inp.options);
	var inputAttrs = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$InputToHtmlTreeConverter$toId(inp.id),
				_user$project$InputToHtmlTreeConverter$toDisabled(inp.disabled),
				A2(_user$project$InputToHtmlTreeConverter$toClasses, inp.classList, _user$project$FormModel$Normal),
				_elm_lang$core$Maybe$Just(
				A2(_user$project$HtmlTree$Attribute, 'multiple', 'multiple'))
			]));
	var children = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$InputToHtmlTreeConverter$toLabel(inp.label),
				_elm_lang$core$Maybe$Just(
				A4(
					_user$project$HtmlTree$Element,
					'select',
					inputAttrs,
					_user$project$HtmlTree$Children(options),
					'')),
				_user$project$InputToHtmlTreeConverter$toSmall(inp.small),
				_user$project$InputToHtmlTreeConverter$toLinks(inp.id)
			]));
	return A4(
		_user$project$HtmlTree$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'class', 'form-group')
			]),
		_user$project$HtmlTree$Children(children),
		'');
};
var _user$project$InputToHtmlTreeConverter$textAreaToHtmlTree = function (inp) {
	var inputAttrs = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$InputToHtmlTreeConverter$toId(inp.id),
				_user$project$InputToHtmlTreeConverter$toPlaceholder(inp.placeholder),
				_user$project$InputToHtmlTreeConverter$toDisabled(inp.disabled),
				_user$project$InputToHtmlTreeConverter$toReadonly(inp.readonly),
				A2(_user$project$InputToHtmlTreeConverter$toClasses, inp.classList, _user$project$FormModel$Normal),
				_elm_lang$core$Maybe$Just(
				A2(
					_user$project$HtmlTree$Attribute,
					'rows',
					_elm_lang$core$Basics$toString(inp.rowNumber)))
			]));
	var children = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$InputToHtmlTreeConverter$toLabel(inp.label),
				_elm_lang$core$Maybe$Just(
				A4(
					_user$project$HtmlTree$Element,
					'textarea',
					inputAttrs,
					_user$project$HtmlTree$Children(
						_elm_lang$core$Native_List.fromArray(
							[])),
					'')),
				_user$project$InputToHtmlTreeConverter$toLinks(inp.id)
			]));
	return A4(
		_user$project$HtmlTree$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'class', 'form-group')
			]),
		_user$project$HtmlTree$Children(children),
		'');
};
var _user$project$InputToHtmlTreeConverter$selectToHtmlTree = function (inp) {
	var options = A2(
		_elm_lang$core$List$map,
		function (value) {
			return A4(
				_user$project$HtmlTree$Element,
				'option',
				_elm_lang$core$Native_List.fromArray(
					[]),
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				value);
		},
		inp.options);
	var inputAttrs = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$InputToHtmlTreeConverter$toId(inp.id),
				_user$project$InputToHtmlTreeConverter$toDisabled(inp.disabled),
				A2(_user$project$InputToHtmlTreeConverter$toClasses, inp.classList, inp.size)
			]));
	var children = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$InputToHtmlTreeConverter$toLabel(inp.label),
				_elm_lang$core$Maybe$Just(
				A4(
					_user$project$HtmlTree$Element,
					'select',
					inputAttrs,
					_user$project$HtmlTree$Children(options),
					'')),
				_user$project$InputToHtmlTreeConverter$toSmall(inp.small),
				_user$project$InputToHtmlTreeConverter$toLinks(inp.id)
			]));
	return A4(
		_user$project$HtmlTree$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'class', 'form-group')
			]),
		_user$project$HtmlTree$Children(children),
		'');
};
var _user$project$InputToHtmlTreeConverter$textInputToHtmlTree = function (inp) {
	var inputAttrs = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$InputToHtmlTreeConverter$toId(inp.id),
				_user$project$InputToHtmlTreeConverter$toPlaceholder(inp.placeholder),
				_user$project$InputToHtmlTreeConverter$toDisabled(inp.disabled),
				_user$project$InputToHtmlTreeConverter$toReadonly(inp.readonly),
				A2(_user$project$InputToHtmlTreeConverter$toClasses, inp.classList, inp.size),
				_user$project$InputToHtmlTreeConverter$toType(inp.type$)
			]));
	var children = A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$InputToHtmlTreeConverter$toLabel(inp.label),
				A2(_user$project$InputToHtmlTreeConverter$wrapInAddons, inputAttrs, inp),
				_user$project$InputToHtmlTreeConverter$toSmall(inp.small),
				_user$project$InputToHtmlTreeConverter$toLinks(inp.id)
			]));
	return A4(
		_user$project$HtmlTree$Element,
		'div',
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'class', 'form-group')
			]),
		_user$project$HtmlTree$Children(children),
		'');
};
var _user$project$InputToHtmlTreeConverter$inputToHtmlTree = function (input) {
	var _p2 = input.type$;
	switch (_p2.ctor) {
		case 'Text':
			return _user$project$InputToHtmlTreeConverter$textInputToHtmlTree(input);
		case 'TextArea':
			return _user$project$InputToHtmlTreeConverter$textAreaToHtmlTree(input);
		case 'Select':
			return _user$project$InputToHtmlTreeConverter$selectToHtmlTree(input);
		case 'Multiselect':
			return _user$project$InputToHtmlTreeConverter$multiselectToHtmlTree(input);
		case 'FileUpload':
			return _user$project$InputToHtmlTreeConverter$fileUploadToHtmlTree(input);
		case 'Radio':
			return _user$project$InputToHtmlTreeConverter$radioToHtmlTree(input);
		case 'Checkbox':
			return _user$project$InputToHtmlTreeConverter$checkboxToHtmlTree(input);
		case 'Button':
			return _user$project$InputToHtmlTreeConverter$buttonToHtmlTree(input);
		default:
			return _user$project$InputToHtmlTreeConverter$textInputToHtmlTree(input);
	}
};
