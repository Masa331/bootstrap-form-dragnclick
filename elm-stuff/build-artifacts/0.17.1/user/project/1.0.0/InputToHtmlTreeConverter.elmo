var _user$project$InputToHtmlTreeConverter$toClasses = F2(
	function (classList, size) {
		var sizeClass = function () {
			var _p0 = size;
			switch (_p0.ctor) {
				case 'Small':
					return 'form-control-sm';
				case 'Normal':
					return '';
				default:
					return 'form-control-lg';
			}
		}();
		return _elm_lang$core$Maybe$Just(
			A2(
				_user$project$HtmlTree$Attribute,
				'class',
				A2(
					_elm_lang$core$String$join,
					' ',
					A2(_elm_lang$core$List_ops['::'], sizeClass, classList))));
	});
var _user$project$InputToHtmlTreeConverter$toLinks = function (value) {
	return _elm_lang$core$Maybe$Just(
		A4(
			_user$project$HtmlTree$Element,
			'editLinks',
			_elm_lang$core$Native_List.fromArray(
				[]),
			_user$project$HtmlTree$Children(
				_elm_lang$core$Native_List.fromArray(
					[])),
			_elm_lang$core$Basics$toString(value)));
};
var _user$project$InputToHtmlTreeConverter$toType = function (value) {
	return _elm_lang$core$Maybe$Just(
		A2(
			_user$project$HtmlTree$Attribute,
			'type',
			_user$project$FormModel$typeToText(value)));
};
var _user$project$InputToHtmlTreeConverter$toLegend = function (value) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (value) {
			return A4(
				_user$project$HtmlTree$Element,
				'legend',
				_elm_lang$core$Native_List.fromArray(
					[]),
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				value);
		},
		value);
};
var _user$project$InputToHtmlTreeConverter$toLabel = function (value) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (value) {
			return A4(
				_user$project$HtmlTree$Element,
				'label',
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$HtmlTree$Attribute, 'for', 'input1')
					]),
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				value);
		},
		value);
};
var _user$project$InputToHtmlTreeConverter$toSmall = function (value) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (value) {
			return A4(
				_user$project$HtmlTree$Element,
				'small',
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$HtmlTree$Attribute, 'class', 'form-text text-muted')
					]),
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				value);
		},
		value);
};
var _user$project$InputToHtmlTreeConverter$toAddon = function (value) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (value) {
			return A4(
				_user$project$HtmlTree$Element,
				'div',
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$HtmlTree$Attribute, 'class', 'input-group-addon')
					]),
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				value);
		},
		value);
};
var _user$project$InputToHtmlTreeConverter$toReadonly = function (value) {
	return value ? _elm_lang$core$Maybe$Just(
		A2(_user$project$HtmlTree$Attribute, 'readonly', 'readonly')) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$InputToHtmlTreeConverter$toDisabled = function (value) {
	return value ? _elm_lang$core$Maybe$Just(
		A2(_user$project$HtmlTree$Attribute, 'disabled', 'disabled')) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$InputToHtmlTreeConverter$toId = function (value) {
	return _elm_lang$core$Maybe$Just(
		A2(
			_user$project$HtmlTree$Attribute,
			'id',
			A2(
				_elm_lang$core$Basics_ops['++'],
				'input',
				_elm_lang$core$Basics$toString(value))));
};
var _user$project$InputToHtmlTreeConverter$toPlaceholder = function (value) {
	return A2(
		_elm_lang$core$Maybe$map,
		_user$project$HtmlTree$Attribute('placeholder'),
		value);
};
var _user$project$InputToHtmlTreeConverter$buttonToHtmlTree = F2(
	function (inp, attrs) {
		var links = _user$project$InputToHtmlTreeConverter$toLinks(
			_user$project$FormModel$extractId(inp));
		var button = _elm_lang$core$Maybe$Just(
			A4(
				_user$project$HtmlTree$Element,
				'button',
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$HtmlTree$Attribute, 'type', 'submit'),
						A2(_user$project$HtmlTree$Attribute, 'class', 'btn btn-primary')
					]),
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				A2(_elm_lang$core$Maybe$withDefault, 'Submit', attrs.label)));
		return A4(
			_user$project$HtmlTree$Element,
			'div',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$HtmlTree$Attribute, 'class', 'my-container')
				]),
			_user$project$HtmlTree$Children(
				A2(
					_elm_lang$core$List$filterMap,
					_elm_lang$core$Basics$identity,
					_elm_lang$core$Native_List.fromArray(
						[button, links]))),
			'');
	});
var _user$project$InputToHtmlTreeConverter$checkboxToHtmlTree = F2(
	function (inp, attrs) {
		var links = _user$project$InputToHtmlTreeConverter$toLinks(
			_user$project$FormModel$extractId(inp));
		var input = A4(
			_user$project$HtmlTree$Element,
			'input',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$HtmlTree$Attribute, 'type', 'checkbox'),
					A2(_user$project$HtmlTree$Attribute, 'class', 'form-check-input')
				]),
			_user$project$HtmlTree$Children(
				_elm_lang$core$Native_List.fromArray(
					[])),
			'');
		var label = function () {
			var _p1 = attrs.label;
			if (_p1.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Just(
					A4(
						_user$project$HtmlTree$Element,
						'label',
						_elm_lang$core$Native_List.fromArray(
							[
								A2(_user$project$HtmlTree$Attribute, 'class', 'form-check-label')
							]),
						_user$project$HtmlTree$Children(
							_elm_lang$core$Native_List.fromArray(
								[input])),
						''));
			} else {
				return _elm_lang$core$Maybe$Just(
					A4(
						_user$project$HtmlTree$Element,
						'label',
						_elm_lang$core$Native_List.fromArray(
							[
								A2(_user$project$HtmlTree$Attribute, 'class', 'form-check-label')
							]),
						_user$project$HtmlTree$Children(
							_elm_lang$core$Native_List.fromArray(
								[input])),
						_p1._0));
			}
		}();
		var children = A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			_elm_lang$core$Native_List.fromArray(
				[label, links]));
		return A4(
			_user$project$HtmlTree$Element,
			'div',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$HtmlTree$Attribute, 'class', 'form-check')
				]),
			_user$project$HtmlTree$Children(children),
			'');
	});
var _user$project$InputToHtmlTreeConverter$toRadioOption = F3(
	function (id, index, value) {
		var input = A4(
			_user$project$HtmlTree$Element,
			'input',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$HtmlTree$Attribute, 'type', 'radio'),
					A2(_user$project$HtmlTree$Attribute, 'class', 'form-check-input'),
					A2(
					_user$project$HtmlTree$Attribute,
					'name',
					_elm_lang$core$Basics$toString(id)),
					A2(
					_user$project$HtmlTree$Attribute,
					'id',
					_elm_lang$core$Basics$toString(id)),
					A2(_user$project$HtmlTree$Attribute, 'value', value)
				]),
			_user$project$HtmlTree$Children(
				_elm_lang$core$Native_List.fromArray(
					[])),
			'');
		var children = A4(
			_user$project$HtmlTree$Element,
			'label',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$HtmlTree$Attribute, 'class', 'form-check-label')
				]),
			_user$project$HtmlTree$Children(
				_elm_lang$core$Native_List.fromArray(
					[input])),
			value);
		return A4(
			_user$project$HtmlTree$Element,
			'div',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$HtmlTree$Attribute, 'class', 'form-check')
				]),
			_user$project$HtmlTree$Children(
				_elm_lang$core$Native_List.fromArray(
					[children])),
			'');
	});
var _user$project$InputToHtmlTreeConverter$radioToHtmlTree = F2(
	function (inp, attrs) {
		var links = _user$project$InputToHtmlTreeConverter$toLinks(
			_user$project$FormModel$extractId(inp));
		var legend = _user$project$InputToHtmlTreeConverter$toLegend(attrs.label);
		var options = A2(
			_elm_lang$core$List$map,
			function (value) {
				return _elm_lang$core$Maybe$Just(
					A3(_user$project$InputToHtmlTreeConverter$toRadioOption, attrs.id, 1, value));
			},
			attrs.options);
		var children = A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Native_List.fromArray(
					[legend]),
				A2(
					_elm_lang$core$Basics_ops['++'],
					options,
					_elm_lang$core$Native_List.fromArray(
						[links]))));
		var inputAttrs = _elm_lang$core$Native_List.fromArray(
			[
				A2(_user$project$HtmlTree$Attribute, 'type', 'text'),
				A2(_user$project$HtmlTree$Attribute, 'class', 'form-control'),
				A2(_user$project$HtmlTree$Attribute, 'id', 'input1')
			]);
		var input = A4(
			_user$project$HtmlTree$Element,
			'input',
			inputAttrs,
			_user$project$HtmlTree$Children(
				_elm_lang$core$Native_List.fromArray(
					[])),
			'');
		return A4(
			_user$project$HtmlTree$Element,
			'fieldset',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$HtmlTree$Attribute, 'class', 'form-group')
				]),
			_user$project$HtmlTree$Children(children),
			'');
	});
var _user$project$InputToHtmlTreeConverter$fileUploadToHtmlTree = F2(
	function (inp, attrs) {
		var links = _user$project$InputToHtmlTreeConverter$toLinks(
			_user$project$FormModel$extractId(inp));
		var smallText = _user$project$InputToHtmlTreeConverter$toSmall(attrs.small);
		var inputLabel = _user$project$InputToHtmlTreeConverter$toLabel(attrs.label);
		var uploadType = _elm_lang$core$Maybe$Just(
			A2(_user$project$HtmlTree$Attribute, 'type', 'file'));
		var inputClasses = A2(_user$project$InputToHtmlTreeConverter$toClasses, attrs.classList, _user$project$FormModel$Normal);
		var disabled = _user$project$InputToHtmlTreeConverter$toDisabled(attrs.disabled);
		var id = _user$project$InputToHtmlTreeConverter$toId(attrs.id);
		var uploadAttrs = A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			_elm_lang$core$Native_List.fromArray(
				[id, inputClasses, disabled, uploadType]));
		var upload = _elm_lang$core$Maybe$Just(
			A4(
				_user$project$HtmlTree$Element,
				'input',
				uploadAttrs,
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				''));
		var children = A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			_elm_lang$core$Native_List.fromArray(
				[inputLabel, upload, smallText, links]));
		return A4(
			_user$project$HtmlTree$Element,
			'div',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$HtmlTree$Attribute, 'class', 'form-group')
				]),
			_user$project$HtmlTree$Children(children),
			'');
	});
var _user$project$InputToHtmlTreeConverter$multiselectToHtmlTree = F2(
	function (inp, attrs) {
		var links = _user$project$InputToHtmlTreeConverter$toLinks(
			_user$project$FormModel$extractId(inp));
		var smallText = _user$project$InputToHtmlTreeConverter$toSmall(attrs.small);
		var inputLabel = _user$project$InputToHtmlTreeConverter$toLabel(attrs.label);
		var options = A2(
			_elm_lang$core$List$map,
			function (value) {
				return A4(
					_user$project$HtmlTree$Element,
					'option',
					_elm_lang$core$Native_List.fromArray(
						[]),
					_user$project$HtmlTree$Children(
						_elm_lang$core$Native_List.fromArray(
							[])),
					value);
			},
			attrs.options);
		var multiple = _elm_lang$core$Maybe$Just(
			A2(_user$project$HtmlTree$Attribute, 'multiple', 'multiple'));
		var inputClasses = A2(_user$project$InputToHtmlTreeConverter$toClasses, attrs.classList, _user$project$FormModel$Normal);
		var disabled = _user$project$InputToHtmlTreeConverter$toDisabled(attrs.disabled);
		var id = _user$project$InputToHtmlTreeConverter$toId(attrs.id);
		var selectAttrs = A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			_elm_lang$core$Native_List.fromArray(
				[id, inputClasses, disabled, multiple]));
		var select = _elm_lang$core$Maybe$Just(
			A4(
				_user$project$HtmlTree$Element,
				'select',
				selectAttrs,
				_user$project$HtmlTree$Children(options),
				''));
		var children = A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			_elm_lang$core$Native_List.fromArray(
				[inputLabel, select, smallText, links]));
		return A4(
			_user$project$HtmlTree$Element,
			'div',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$HtmlTree$Attribute, 'class', 'form-group')
				]),
			_user$project$HtmlTree$Children(children),
			'');
	});
var _user$project$InputToHtmlTreeConverter$textAreaToHtmlTree = F2(
	function (inp, attrs) {
		var links = _user$project$InputToHtmlTreeConverter$toLinks(
			_user$project$FormModel$extractId(inp));
		var rowNumber = _elm_lang$core$Maybe$Just(
			A2(
				_user$project$HtmlTree$Attribute,
				'rows',
				_elm_lang$core$Basics$toString(attrs.rowNumber)));
		var inputClasses = A2(_user$project$InputToHtmlTreeConverter$toClasses, attrs.classList, _user$project$FormModel$Normal);
		var placeholder = _user$project$InputToHtmlTreeConverter$toPlaceholder(attrs.placeholder);
		var disabled = _user$project$InputToHtmlTreeConverter$toDisabled(attrs.disabled);
		var id = _user$project$InputToHtmlTreeConverter$toId(attrs.id);
		var areaAttrs = A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			_elm_lang$core$Native_List.fromArray(
				[id, inputClasses, disabled, placeholder, rowNumber]));
		var area = _elm_lang$core$Maybe$Just(
			A4(
				_user$project$HtmlTree$Element,
				'textarea',
				areaAttrs,
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				''));
		var inputLabel = _user$project$InputToHtmlTreeConverter$toLabel(attrs.label);
		return A4(
			_user$project$HtmlTree$Element,
			'div',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$HtmlTree$Attribute, 'class', 'form-group')
				]),
			_user$project$HtmlTree$Children(
				A2(
					_elm_lang$core$List$filterMap,
					_elm_lang$core$Basics$identity,
					_elm_lang$core$Native_List.fromArray(
						[inputLabel, area, links]))),
			'');
	});
var _user$project$InputToHtmlTreeConverter$selectToHtmlTree = F2(
	function (inp, attrs) {
		var links = _user$project$InputToHtmlTreeConverter$toLinks(
			_user$project$FormModel$extractId(inp));
		var smallText = _user$project$InputToHtmlTreeConverter$toSmall(attrs.small);
		var inputLabel = _user$project$InputToHtmlTreeConverter$toLabel(attrs.label);
		var options = A2(
			_elm_lang$core$List$map,
			function (value) {
				return A4(
					_user$project$HtmlTree$Element,
					'option',
					_elm_lang$core$Native_List.fromArray(
						[]),
					_user$project$HtmlTree$Children(
						_elm_lang$core$Native_List.fromArray(
							[])),
					value);
			},
			attrs.options);
		var inputClasses = A2(_user$project$InputToHtmlTreeConverter$toClasses, attrs.classList, attrs.size);
		var disabled = _user$project$InputToHtmlTreeConverter$toDisabled(attrs.disabled);
		var id = _user$project$InputToHtmlTreeConverter$toId(attrs.id);
		var selectAttrs = A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			_elm_lang$core$Native_List.fromArray(
				[id, inputClasses, disabled]));
		var select = _elm_lang$core$Maybe$Just(
			A4(
				_user$project$HtmlTree$Element,
				'select',
				selectAttrs,
				_user$project$HtmlTree$Children(options),
				''));
		var children = A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			_elm_lang$core$Native_List.fromArray(
				[inputLabel, select, smallText, links]));
		return A4(
			_user$project$HtmlTree$Element,
			'div',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$HtmlTree$Attribute, 'class', 'form-group')
				]),
			_user$project$HtmlTree$Children(children),
			'');
	});
var _user$project$InputToHtmlTreeConverter$textInputToHtmlTree = F2(
	function (inp, attrs) {
		var add2 = _user$project$InputToHtmlTreeConverter$toAddon(attrs.addon2);
		var add1 = _user$project$InputToHtmlTreeConverter$toAddon(attrs.addon1);
		var links = _user$project$InputToHtmlTreeConverter$toLinks(
			_user$project$FormModel$extractId(inp));
		var smallText = _user$project$InputToHtmlTreeConverter$toSmall(attrs.small);
		var inputLabel = _user$project$InputToHtmlTreeConverter$toLabel(attrs.label);
		var inputType = _user$project$InputToHtmlTreeConverter$toType(attrs.type$);
		var inputClasses = A2(_user$project$InputToHtmlTreeConverter$toClasses, attrs.classList, attrs.size);
		var readonly = _user$project$InputToHtmlTreeConverter$toReadonly(attrs.readonly);
		var disabled = _user$project$InputToHtmlTreeConverter$toDisabled(attrs.disabled);
		var placeholder = _user$project$InputToHtmlTreeConverter$toPlaceholder(attrs.placeholder);
		var id = _user$project$InputToHtmlTreeConverter$toId(attrs.id);
		var inputAttrs = A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			_elm_lang$core$Native_List.fromArray(
				[id, inputClasses, placeholder, inputType, readonly, disabled]));
		var input1 = _elm_lang$core$Maybe$Just(
			A4(
				_user$project$HtmlTree$Element,
				'input',
				inputAttrs,
				_user$project$HtmlTree$Children(
					_elm_lang$core$Native_List.fromArray(
						[])),
				''));
		var input = _elm_lang$core$List$isEmpty(
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				_elm_lang$core$Native_List.fromArray(
					[add1, add2]))) ? input1 : _elm_lang$core$Maybe$Just(
			A4(
				_user$project$HtmlTree$Element,
				'div',
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$HtmlTree$Attribute, 'class', 'input-group')
					]),
				_user$project$HtmlTree$Children(
					A2(
						_elm_lang$core$List$filterMap,
						_elm_lang$core$Basics$identity,
						_elm_lang$core$Native_List.fromArray(
							[add1, input1, add2]))),
				''));
		var children = A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			_elm_lang$core$Native_List.fromArray(
				[inputLabel, input, smallText, links]));
		return A4(
			_user$project$HtmlTree$Element,
			'div',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_user$project$HtmlTree$Attribute, 'class', 'form-group')
				]),
			_user$project$HtmlTree$Children(children),
			'');
	});
var _user$project$InputToHtmlTreeConverter$textInputToHtmlTree2 = F2(
	function (inp, attrs) {
		return A4(
			_user$project$HtmlTree$Element,
			'div',
			_elm_lang$core$Native_List.fromArray(
				[]),
			_user$project$HtmlTree$Children(
				_elm_lang$core$Native_List.fromArray(
					[])),
			'');
	});
var _user$project$InputToHtmlTreeConverter$inputToHtmlTree = function (input) {
	var _p2 = input;
	switch (_p2.ctor) {
		case 'TextInput':
			return A2(_user$project$InputToHtmlTreeConverter$textInputToHtmlTree, input, _p2._0);
		case 'TextArea':
			return A2(_user$project$InputToHtmlTreeConverter$textAreaToHtmlTree, input, _p2._0);
		case 'Select':
			return A2(_user$project$InputToHtmlTreeConverter$selectToHtmlTree, input, _p2._0);
		case 'Multiselect':
			return A2(_user$project$InputToHtmlTreeConverter$multiselectToHtmlTree, input, _p2._0);
		case 'FileUpload':
			return A2(_user$project$InputToHtmlTreeConverter$fileUploadToHtmlTree, input, _p2._0);
		case 'Radio':
			return A2(_user$project$InputToHtmlTreeConverter$radioToHtmlTree, input, _p2._0);
		case 'Checkbox':
			return A2(_user$project$InputToHtmlTreeConverter$checkboxToHtmlTree, input, _p2._0);
		default:
			return A2(_user$project$InputToHtmlTreeConverter$buttonToHtmlTree, input, _p2._0);
	}
};
