var _user$project$Main$subscriptions = function (model) {
	return A2(
		_elm_lang$core$List$any,
		function (_) {
			return _.dragged;
		},
		model.form) ? _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$mouse$Mouse$moves(
				function (_p0) {
					return _user$project$Messages$MouseMessage(
						_user$project$Messages$MouseMove(_p0));
				}),
				_elm_lang$mouse$Mouse$ups(
				function (_p1) {
					return _user$project$Messages$MouseMessage(
						_user$project$Messages$MouseUp(_p1));
				})
			])) : _user$project$Utils$determinedFormMap(_user$project$Messages$MapDetermined);
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'InputMessage':
				return A2(_user$project$Updates$inputUpdate, _p2._0, model);
			case 'FormMessage':
				return A2(_user$project$Updates$formUpdate, _p2._0, model);
			case 'MouseMessage':
				return A2(_user$project$Updates$mouseUpdate, _p2._0, model);
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{elementMap: _p2._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$view = function (model) {
	return _user$project$Views$view(model);
};
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Models$initial, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})
};
